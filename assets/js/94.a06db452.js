(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{430:function(s,n,a){"use strict";a.r(n);var t=a(7),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("[TOC]")]),s._v(" "),n("h4",{attrs:{id:"_1-栈的特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-栈的特点"}},[s._v("#")]),s._v(" 1.栈的特点")]),s._v(" "),n("p",[s._v("先进后出")]),s._v(" "),n("h4",{attrs:{id:"_2-栈的种类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-栈的种类"}},[s._v("#")]),s._v(" 2.栈的种类")]),s._v(" "),n("p",[s._v("顺序栈（数组实现）和链式栈（链表实现），双栈没有特别了解")]),s._v(" "),n("h4",{attrs:{id:"_3-栈的类定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-栈的类定义"}},[s._v("#")]),s._v(" 3.栈的类定义")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const int maxSize=50;\nenum bool{false,true};\ntemplate<class T>\n\x3c!-- more --\x3e\nclass Stack{\npublic:\n    Stack(){};\n    virtual void Push(const T& x)=0;\n    virtual bool Pop(T& x)=0;\n    virtual bool getTop(T& x)=0;//使用& x是将函数中的x的变化带回。\n    virtual bool IsEmpty() const = 0;\n    virtual bool IsFull() const=0;//常成员函数，不得修改类中的任何数据成员的值\n    virtual int getSize() const=0;//计算栈中的元素个数\n    };\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h5",{attrs:{id:"_3-1-顺序栈的类定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-顺序栈的类定义"}},[s._v("#")]),s._v(" 3.1 顺序栈的类定义")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include<assert.h> //断言。满足断言中参数的条件则继续执行，不满足则终止程序的执行\n#include<iostream.h>\n#include "Stack.h"\nconst int stackIncreament=20;//栈溢出扩展空间增量\ntemplate<class T>\nclass SeqStack: public Stack<T>{\npublic:\n\tSeqStack(int sz=50);\n    ~SeqStack(){delete[] elements;}\n    void Push(const T& x);\n    bool Pop(T& x);\n    bool getTop(T& x);\n    bool IsEmpty()const {return (top==-1)?true:false}\n    bool IsFull()const {return (top=maxSize-1)?true:false}\n    int getSize()const {return top+1;}\n    void MakeEmpty(){top=-1;}\n    friend ostream& operater<<(ostream& os,SeqStack<T>& s);//操作符号重载如何实现？\nprivate:\n    T *elements;\n    int top;\n    int maxSize;\n    void overflowProcess();\n};\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h5",{attrs:{id:"_3-2-顺序栈的构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-顺序栈的构造函数"}},[s._v("#")]),s._v(" 3.2 顺序栈的构造函数")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("template<class T>\nSeqStack<T>::SeqStack(int sz):top(-1),maxSize(sz){\n    T* elements=new T[maxSize];\n    assert(element!=null);\n};//函数和类后面都要加冒号\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h5",{attrs:{id:"_3-3-顺序栈函数实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-顺序栈函数实现"}},[s._v("#")]),s._v(" 3.3 顺序栈函数实现")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('template<class T>\nvoid SeqStack<T>::overflowStack(){\n    T* newArray=new T[maxSize+stackIncreament];\n    if(newArray=null){cerr<<"内存分配失败"<<endl;exit(1);}\n    for(int i=0;i<=0;i++) newArray[i]=elements[i];\n    maxSize=maxSize+stackIncreament;\n    delete []elements;\n    elements=newArray;\n};\n\ntemplate<class T>//这是每实现一个函数都需要一个模板吗？\nvoid SeqStack<T>::Push(const T& x){\n    if(IsEmpty()==true) overflowStack();\n    elements[++top]=x;\n};\ntemplate<class T>\nvoid SeqStack<T>::Pop(T& x){\n    if(!IsEmpty()) return false;\n    x=elements[top--];\n    return true;\n};\n\ntemplate<class T>\nvoid SeqStack<T>::getTop(T& x){\n    if(!IsEmpty())  return false;\n    x=elements[top];\n    return true;\n};\n\ntemplate<class T>\nostream& operator<<(ostream& os,SeqStack<T>& s){\n    os<<"top="<<s.top<<endl;\n    for(int i;int i<=.stop;i++)\n        os<<i<<":"<<s.element[i]<<endl;\n    return os;\n};\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("h4",{attrs:{id:"_4-链式栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-链式栈"}},[s._v("#")]),s._v(" 4 链式栈")]),s._v(" "),n("p",[s._v("使用链式栈便于插入和删除，是用顺序栈便于查找。链式表的栈顶在链表的表头")]),s._v(" "),n("h5",{attrs:{id:"_4-1链式栈节点定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1链式栈节点定义"}},[s._v("#")]),s._v(" 4.1链式栈节点定义")]),s._v(" "),n("p",[s._v("用struct定义LinkedNode类")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class LinkList{\n    struct LinkNode{\n    int date;\n    LinkNode *link;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h5",{attrs:{id:"_4-2-链式栈的类定义及其实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-链式栈的类定义及其实现"}},[s._v("#")]),s._v(" 4.2 链式栈的类定义及其实现")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include<iostream>\n#include "LinkList.h"\n#include "stack.h"\ntemplate<class T>\nclass LinkedStack: public Stack<T>{\npublic:\n    LinkedStack():top(null){}\n    ~LinkedStack(){makeEmpty();}\n    void Push(const T& x);\n    bool Pop(T& x);\n    bool getTop(T& x)const;\n    bool IsEmpty()const{return (top==null)?true:false;}\n    int getSize()const;\n    void makeEmpty();\n    friend ostream& operator<<(ostream& os,SeqStack<T>& s);\nprivate:\n    LinkNode<T> *top;\n};\n//各方法实现\n\ntemplate<class T>\nLinkedStack<T>::makeEmpty(){\n    LinkNode<T> *p;\n    while(!top){\n        p=top;\n        top=top->link;\n        delete p;\n    }\n};\n\ntemplate<class T>\nvoid LinkedStack<T>::Push(const T& x){\n    top=new LinkNode<T>(x,top);\n    assert(top);\n};\n\ntemplate<class T>\nvoid LinkedStack<T>::Pop(T& x){\n    if(!IsEmpty){return false;}\n    LinkNode<T> *p=top;\n    top=top->link;\n    x=p->date;\n    delete p;\n    return true;\n};\n\ntemplate<class T>\nbool LinkedStack<T>::getTop(T& x)const{//\n    if(!IsEmpty){return false;}\n    x=top->date;\n    return true;\n};\n\ntemplate<class T>\nint LinkedStack<T>::getSize(T& x)const{\n    LinkNode *p=top;\n    int k=0;\n    while(top){top=top->link;k++;}\n    return k;\n};\n\ntemplate<class T>\nostream& operator<<(ostream& os,LinkedStack<T>& s){\n    os<<"The number of stack"<<s.getSize()<<endl;\n    LinkNode<T> *p=s.getSize;\n    int i=0;\n    while(p){\n        os<<++i<<":"<<p->date<<endl;\n        p=p->link;\n    }\n    return os;\n};\n//定义了栈的基本结构，使用虚函数实现多态，顺序栈则使用顺序栈的使用方法，链式栈则使用链式栈的实现方法。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br")])]),n("h4",{attrs:{id:"_5-散装问题、知识点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-散装问题、知识点"}},[s._v("#")]),s._v(" 5. 散装问题、知识点")]),s._v(" "),n("h5",{attrs:{id:"_5-1-栈的应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-栈的应用场景"}},[s._v("#")]),s._v(" 5.1 栈的应用场景？")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("逆序输出：首先把所有元素依次入栈，然后把所有元素出栈并输出，这样就实现了逆序输出。")])]),s._v(" "),n("li",[n("p",[s._v("语法检查，符号成对出现：括号都是成对出现的，比如“()”“[]”“{}”“<>”这些成对出现的符号")])]),s._v(" "),n("li",[n("p",[s._v("数制转换：将十进制的数转换为2-9的任意进制的数，过求余法，可以将十进制数转换为其他进制，比如要转为八进制，将十进制数除以8，记录余数，然后继续将商除以8，一直到商等于0为止，最后将余数倒着写数来就可以了")])]),s._v(" "),n("li",[n("p",[s._v("子程序的调用")])]),s._v(" "),n("li",[n("p",[s._v("处理递归调用")])]),s._v(" "),n("li",[n("p",[s._v("表达式的转换与求值")])]),s._v(" "),n("li",[n("p",[s._v("二叉树的遍历")])]),s._v(" "),n("li",[n("p",[s._v("图形的深度优先（depth-first）搜索法")])])]),s._v(" "),n("h5",{attrs:{id:"_5-2-关于markdown目录生成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-关于markdown目录生成"}},[s._v("#")]),s._v(" 5.2 关于MarkDown目录生成")]),s._v(" "),n("p",[s._v("只要文章是按照markdown语法写作的。在需要生成目录的地方写[TOC]")])])}),[],!1,null,null,null);n.default=e.exports}}]);