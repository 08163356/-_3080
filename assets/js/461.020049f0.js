(window.webpackJsonp=window.webpackJsonp||[]).push([[461],{798:function(t,_,v){"use strict";v.r(_);var e=v(7),a=Object(e.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("[toc]")]),t._v(" "),_("p",[t._v("你可能做了很长时间的 JavaScript 开发，但有时候你可能没有使用最新的 JavaScript 特性或技巧，这些特性和技巧可以在不需要编写额外代码的情况下解决你的问题。它们可以帮助你写出干净且优化的 JavaScript 代码。")]),t._v(" "),_("h3",{attrs:{id:"_1-带有多个条件的-if-语句"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-带有多个条件的-if-语句"}},[t._v("#")]),t._v(" 1. 带有多个条件的 if 语句")]),t._v(" "),_("p",[t._v("把多个值放在一个数组中，然后调用数组的 includes 方法。")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("if (x === 'abc' || x === 'def' || x === 'ghi' || x ==='jkl') {\n")]),t._v(" "),_("p",[t._v("//logic")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("if (['abc', 'def', 'ghi', 'jkl'].includes(x)) {")]),t._v(" "),_("p",[t._v("//logic")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("h3",{attrs:{id:"_2-简化-if-true-else"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-简化-if-true-else"}},[t._v("#")]),t._v(" 2. 简化 if true...else")]),t._v(" "),_("p",[t._v("对于不包含大逻辑的 if-else 条件，可以使用下面的快捷写法。我们可以简单地使用三元运算符来实现这种简化。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("let test: boolean;")]),t._v(" "),_("p",[t._v("if (x > 100) {")]),t._v(" "),_("p",[t._v("test = true;")]),t._v(" "),_("p",[t._v("} else {")]),t._v(" "),_("p",[t._v("test = false;")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("let test = (x > 10) ? true : false;")]),t._v(" "),_("p",[t._v("//or we can use directly")]),t._v(" "),_("p",[t._v("let test = x > 10;")]),t._v(" "),_("p",[t._v("console.log(test);")]),t._v(" "),_("p",[t._v("如果有嵌套的条件，可以这么做。")]),t._v(" "),_("p",[t._v("let x = 300,")]),t._v(" "),_("p",[t._v("test2 = (x > 100) ? 'greater 100' : (x < 50) ? 'less 50' : 'between 50 and 100';")]),t._v(" "),_("p",[t._v('console.log(test2); // "greater than 100"')]),t._v(" "),_("h3",{attrs:{id:"_3-声明变量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-声明变量"}},[t._v("#")]),t._v(" 3. 声明变量")]),t._v(" "),_("p",[t._v("当我们想要声明两个具有相同的值或相同类型的变量时，可以使用这种简写。")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("let test1;")]),t._v(" "),_("p",[t._v("let test2 = 1;")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("let test1, test2 = 1;")]),t._v(" "),_("h3",{attrs:{id:"_4-null、undefined-和空值检查"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-null、undefined-和空值检查"}},[t._v("#")]),t._v(" 4. null、undefined 和空值检查")]),t._v(" "),_("p",[t._v("当我们创建了新变量，有时候想要检查引用的变量是不是为非 null 或 undefined。JavaScript 确实有一个很好的快捷方式来实现这种检查。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("if (test1 !== null || test1 !== undefined || test1 !== '') {")]),t._v(" "),_("p",[t._v("let test2 = test1;")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("let test2 = test1 || '';")]),t._v(" "),_("p",[t._v("两个问号判空")]),t._v(" "),_("h3",{attrs:{id:"_5-null-检查和默认赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-null-检查和默认赋值"}},[t._v("#")]),t._v(" 5. null 检查和默认赋值")]),t._v(" "),_("p",[t._v("let test1 = null,")]),t._v(" "),_("p",[t._v("test2 = test1 || '';")]),t._v(" "),_("p",[t._v('console.log("null check", test2); // output will be ""')]),t._v(" "),_("h3",{attrs:{id:"_6-undefined-检查和默认赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-undefined-检查和默认赋值"}},[t._v("#")]),t._v(" 6. undefined 检查和默认赋值")]),t._v(" "),_("p",[t._v("let test1 = undefined,")]),t._v(" "),_("p",[t._v("test2 = test1 || '';")]),t._v(" "),_("p",[t._v('console.log("undefined check", test2); // output will be ""')]),t._v(" "),_("p",[t._v("一般值检查")]),t._v(" "),_("p",[t._v("let test1 = 'test',")]),t._v(" "),_("p",[t._v("test2 = test1 || '';")]),t._v(" "),_("p",[t._v("console.log(test2); // output: 'test'")]),t._v(" "),_("p",[t._v("另外，对于上述的 4、5、6 点，都可以使用?? 操作符。")]),t._v(" "),_("p",[t._v("如果左边值为 null 或 undefined，就返回右边的值。默认情况下，它将返回左边的值。")]),t._v(" "),_("p",[t._v("const test= null ?? 'default';")]),t._v(" "),_("p",[t._v("console.log(test);")]),t._v(" "),_("p",[t._v('// expected output: "default"')]),t._v(" "),_("p",[t._v("const test1 = 0 ?? 2;")]),t._v(" "),_("p",[t._v("console.log(test1);")]),t._v(" "),_("p",[t._v("// expected output: 0")]),t._v(" "),_("h3",{attrs:{id:"_7-给多个变量赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-给多个变量赋值"}},[t._v("#")]),t._v(" 7. 给多个变量赋值")]),t._v(" "),_("p",[t._v("当我们想给多个不同的变量赋值时，这种技巧非常有用。")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("let test1, test2, test3;")]),t._v(" "),_("p",[t._v("test1 = 1;")]),t._v(" "),_("p",[t._v("test2 = 2;")]),t._v(" "),_("p",[t._v("test3 = 3;")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("let [test1, test2, test3] = [1, 2, 3];")]),t._v(" "),_("h3",{attrs:{id:"_8-简便的赋值操作符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-简便的赋值操作符"}},[t._v("#")]),t._v(" 8. 简便的赋值操作符")]),t._v(" "),_("p",[t._v("在编程过程中，我们要处理大量的算术运算符。这是 JavaScript 变量赋值操作符的有用技巧之一。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("test1 = test1 + 1;")]),t._v(" "),_("p",[t._v("test2 = test2 - 1;")]),t._v(" "),_("p",[t._v("test3 = test3 * 20;")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("test1++;")]),t._v(" "),_("p",[t._v("test2--;")]),t._v(" "),_("p",[t._v("test3 *= 20;")]),t._v(" "),_("h3",{attrs:{id:"_9-if-判断值是否存在"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-if-判断值是否存在"}},[t._v("#")]),t._v(" 9. if 判断值是否存在")]),t._v(" "),_("p",[t._v("这是我们都在使用的一种常用的简便技巧，在这里仍然值得再提一下。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v('if (test1 === true) or if (test1 !== "") or if (test1 !== null)')]),t._v(" "),_("p",[t._v("// Shorthand //it will check empty string,null and undefined too")]),t._v(" "),_("p",[t._v("if (test1)")]),t._v(" "),_("p",[t._v("注意：如果 test1 有值，将执行 if 之后的逻辑，这个操作符主要用于 null 或 undefinded 检查。")]),t._v(" "),_("h3",{attrs:{id:"_10-用于多个条件判断的-操作符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-用于多个条件判断的-操作符"}},[t._v("#")]),t._v(" 10. 用于多个条件判断的 && 操作符")]),t._v(" "),_("p",[t._v("如果只在变量为 true 时才调用函数，可以使用 && 操作符。")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("if (test1) {")]),t._v(" "),_("p",[t._v("callMethod();")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("test1 && callMethod();")]),t._v(" "),_("h3",{attrs:{id:"_11-for-each-循环"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-for-each-循环"}},[t._v("#")]),t._v(" 11. for each 循环")]),t._v(" "),_("p",[t._v("这是一种常见的循环简化技巧。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("for (var i = 0; i < testData.length; i++)")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("for (let i in testData) or for (let i of testData)")]),t._v(" "),_("p",[t._v("遍历数组的每一个变量。")]),t._v(" "),_("p",[t._v("function testData(element, index, array) {")]),t._v(" "),_("p",[t._v("console.log('test[' + index + '] = ' + element);")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("[11, 24, 32].forEach(testData);")]),t._v(" "),_("p",[t._v("// logs: test[0] = 11, test[1] = 24, test[2] = 32")]),t._v(" "),_("h3",{attrs:{id:"_12-比较后返回"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12-比较后返回"}},[t._v("#")]),t._v(" 12. 比较后返回")]),t._v(" "),_("p",[t._v("我们也可以在 return 语句中使用比较，它可以将 5 行代码减少到 1 行。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("let test;")]),t._v(" "),_("p",[t._v("function checkReturn() {")]),t._v(" "),_("p",[t._v("if (!(test === undefined)) {")]),t._v(" "),_("p",[t._v("​    return test;")]),t._v(" "),_("p",[t._v("} else {")]),t._v(" "),_("p",[t._v("​    return callMe('test');")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("var data = checkReturn();")]),t._v(" "),_("p",[t._v("console.log(data); //output test")]),t._v(" "),_("p",[t._v("function callMe(val) {")]),t._v(" "),_("p",[t._v("console.log(val);")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("function checkReturn() {")]),t._v(" "),_("p",[t._v("return test || callMe('test');")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("h3",{attrs:{id:"_13-箭头函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13-箭头函数"}},[t._v("#")]),t._v(" 13. 箭头函数")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("function add(a, b) {")]),t._v(" "),_("p",[t._v("return a + b;")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("const add = (a, b) => a + b;")]),t._v(" "),_("p",[t._v("更多例子：")]),t._v(" "),_("p",[t._v("function callMe(name) {")]),t._v(" "),_("p",[t._v("console.log('Hello', name);")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("callMe = name => console.log('Hello', name);")]),t._v(" "),_("h3",{attrs:{id:"_14-简短的函数调用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14-简短的函数调用"}},[t._v("#")]),t._v(" 14. 简短的函数调用")]),t._v(" "),_("p",[t._v("我们可以使用三元操作符来实现多个函数调用。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("function test1() {")]),t._v(" "),_("p",[t._v("console.log('test1');")]),t._v(" "),_("p",[t._v("};")]),t._v(" "),_("p",[t._v("function test2() {")]),t._v(" "),_("p",[t._v("console.log('test2');")]),t._v(" "),_("p",[t._v("};")]),t._v(" "),_("p",[t._v("var test3 = 1;")]),t._v(" "),_("p",[t._v("if (test3 == 1) {")]),t._v(" "),_("p",[t._v("test1();")]),t._v(" "),_("p",[t._v("} else {")]),t._v(" "),_("p",[t._v("test2();")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("(test3 === 1? test1:test2)();")]),t._v(" "),_("h3",{attrs:{id:"_15-switch-简化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-switch-简化"}},[t._v("#")]),t._v(" 15. switch 简化")]),t._v(" "),_("p",[t._v("我们可以将条件保存在键值对象中，并根据条件来调用它们。")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("switch (data) {")]),t._v(" "),_("p",[t._v("case 1:")]),t._v(" "),_("p",[t._v("test1();")]),t._v(" "),_("p",[t._v("break;")]),t._v(" "),_("p",[t._v("case 2:")]),t._v(" "),_("p",[t._v("test2();")]),t._v(" "),_("p",[t._v("break;")]),t._v(" "),_("p",[t._v("case 3:")]),t._v(" "),_("p",[t._v("test();")]),t._v(" "),_("p",[t._v("break;")]),t._v(" "),_("p",[t._v("// And so on...")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("var data = {")]),t._v(" "),_("p",[t._v("1: test1,")]),t._v(" "),_("p",[t._v("2: test2,")]),t._v(" "),_("p",[t._v("3: test")]),t._v(" "),_("p",[t._v("};")]),t._v(" "),_("p",[t._v("data[something] && data"),_("a",{attrs:{href:""}},[t._v("something")]),t._v(";")]),t._v(" "),_("h3",{attrs:{id:"_16-隐式返回"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_16-隐式返回"}},[t._v("#")]),t._v(" 16. 隐式返回")]),t._v(" "),_("p",[t._v("通过使用箭头函数，我们可以直接返回值，不需要 return 语句。")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("function calculate(diameter) {")]),t._v(" "),_("p",[t._v("return Math.PI * diameter")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("calculate = diameter => (")]),t._v(" "),_("p",[t._v("Math.PI * diameter;")]),t._v(" "),_("p",[t._v(")")]),t._v(" "),_("h3",{attrs:{id:"_17-指数表示法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_17-指数表示法"}},[t._v("#")]),t._v(" 17. 指数表示法")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("for (var i = 0; i < 10000; i++) { ... }")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("for (var i = 0; i < 1e4; i++) {")]),t._v(" "),_("h3",{attrs:{id:"_18-默认参数值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_18-默认参数值"}},[t._v("#")]),t._v(" 18. 默认参数值")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("function add(test1, test2) {")]),t._v(" "),_("p",[t._v("if (test1 === undefined)")]),t._v(" "),_("p",[t._v("test1 = 1;")]),t._v(" "),_("p",[t._v("if (test2 === undefined)")]),t._v(" "),_("p",[t._v("test2 = 2;")]),t._v(" "),_("p",[t._v("return test1 + test2;")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("add = (test1 = 1, test2 = 2) => (test1 + test2);")]),t._v(" "),_("p",[t._v("add() //output: 3")]),t._v(" "),_("h3",{attrs:{id:"_19-延展操作符简化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_19-延展操作符简化"}},[t._v("#")]),t._v(" 19. 延展操作符简化")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("// joining arrays using concat")]),t._v(" "),_("p",[t._v("const data = [1, 2, 3];")]),t._v(" "),_("p",[t._v("const test = [4 ,5 , 6].concat(data);")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("// joining arrays")]),t._v(" "),_("p",[t._v("const data = [1, 2, 3];")]),t._v(" "),_("p",[t._v("const test = [4 ,5 , 6, ...data];")]),t._v(" "),_("p",[t._v("console.log(test); // [ 4, 5, 6, 1, 2, 3]")]),t._v(" "),_("p",[t._v("我们也可以使用延展操作符进行克隆。")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("// cloning arrays")]),t._v(" "),_("p",[t._v("const test1 = [1, 2, 3];")]),t._v(" "),_("p",[t._v("const test2 = test1.slice()")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("// cloning arrays")]),t._v(" "),_("p",[t._v("const test1 = [1, 2, 3];")]),t._v(" "),_("p",[t._v("const test2 = [...test1];")]),t._v(" "),_("h3",{attrs:{id:"_20-模板字面量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_20-模板字面量"}},[t._v("#")]),t._v(" 20. 模板字面量")]),t._v(" "),_("p",[t._v("如果你厌倦了使用 + 将多个变量连接成一个字符串，那么这个简化技巧将让你不再头痛。")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("const welcome = 'Hi ' + test1 + ' ' + test2 + '.'")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("const welcome = "),_("code",[t._v("Hi ${test1} ${test2}")]),t._v(";")]),t._v(" "),_("h3",{attrs:{id:"_21-跨行字符串"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_21-跨行字符串"}},[t._v("#")]),t._v(" 21. 跨行字符串")]),t._v(" "),_("p",[t._v("当我们在代码中处理跨行字符串时，可以这样做。")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("const data = 'abc abc abc abc abc abc\\n\\t'")]),t._v(" "),_("p",[t._v("+ 'test test,test test test test\\n\\t'")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("const data = `abc abc abc abc abc abc")]),t._v(" "),_("p",[t._v("​     test test,test test test test`")]),t._v(" "),_("h3",{attrs:{id:"_22-对象属性赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_22-对象属性赋值"}},[t._v("#")]),t._v(" 22. 对象属性赋值")]),t._v(" "),_("p",[t._v("let test1 = 'a';")]),t._v(" "),_("p",[t._v("let test2 = 'b';")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("let obj = {test1: test1, test2: test2};")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("let obj = {test1, test2};")]),t._v(" "),_("h3",{attrs:{id:"_23-将字符串转成数字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_23-将字符串转成数字"}},[t._v("#")]),t._v(" 23. 将字符串转成数字")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("let test1 = parseInt('123');")]),t._v(" "),_("p",[t._v("let test2 = parseFloat('12.3');")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("let test1 = +'123';")]),t._v(" "),_("p",[t._v("let test2 = +'12.3';")]),t._v(" "),_("h3",{attrs:{id:"_24-解构赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_24-解构赋值"}},[t._v("#")]),t._v(" 24. 解构赋值")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("const test1 = this.data.test1;")]),t._v(" "),_("p",[t._v("const test2 = this.data.test2;")]),t._v(" "),_("p",[t._v("const test2 = this.data.test3;")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("const { test1, test2, test3 } = this.data;")]),t._v(" "),_("h3",{attrs:{id:"_25-数组-find-简化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_25-数组-find-简化"}},[t._v("#")]),t._v(" 25. 数组 find 简化")]),t._v(" "),_("p",[t._v("当我们有一个对象数组，并想根据对象属性找到特定对象，find 方法会非常有用。")]),t._v(" "),_("p",[t._v("const data = [{")]),t._v(" "),_("p",[t._v("​    type: 'test1',")]),t._v(" "),_("p",[t._v("​    name: 'abc'")]),t._v(" "),_("p",[t._v("},")]),t._v(" "),_("p",[t._v("{")]),t._v(" "),_("p",[t._v("​    type: 'test2',")]),t._v(" "),_("p",[t._v("​    name: 'cde'")]),t._v(" "),_("p",[t._v("},")]),t._v(" "),_("p",[t._v("{")]),t._v(" "),_("p",[t._v("​    type: 'test1',")]),t._v(" "),_("p",[t._v("​    name: 'fgh'")]),t._v(" "),_("p",[t._v("},")]),t._v(" "),_("p",[t._v("]")]),t._v(" "),_("p",[t._v("function findtest1(name) {")]),t._v(" "),_("p",[t._v("for (let i = 0; i < data.length; ++i) {")]),t._v(" "),_("p",[t._v("​    if (data[i].type === 'test1' && data[i].name === name) {")]),t._v(" "),_("p",[t._v("​      return data[i];")]),t._v(" "),_("p",[t._v("​    }")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("filteredData = data.find(data => data.type === 'test1' && "),_("a",{attrs:{href:"http://data.name/",target:"_blank",rel:"noopener noreferrer"}},[t._v("data.name"),_("OutboundLink")],1),t._v(" === 'fgh');")]),t._v(" "),_("p",[t._v("console.log(filteredData); // { type: 'test1', name: 'fgh' }")]),t._v(" "),_("h3",{attrs:{id:"_26-条件查找简化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_26-条件查找简化"}},[t._v("#")]),t._v(" 26. 条件查找简化")]),t._v(" "),_("p",[t._v("如果我们要基于不同的类型调用不同的方法，可以使用多个 else if 语句或 switch，但有没有比这更好的简化技巧呢？")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("if (type === 'test1') {")]),t._v(" "),_("p",[t._v("test1();")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("else if (type === 'test2') {")]),t._v(" "),_("p",[t._v("test2();")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("else if (type === 'test3') {")]),t._v(" "),_("p",[t._v("test3();")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("else if (type === 'test4') {")]),t._v(" "),_("p",[t._v("test4();")]),t._v(" "),_("p",[t._v("} else {")]),t._v(" "),_("p",[t._v("throw new Error('Invalid value ' + type);")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("var types = {")]),t._v(" "),_("p",[t._v("test1: test1,")]),t._v(" "),_("p",[t._v("test2: test2,")]),t._v(" "),_("p",[t._v("test3: test3,")]),t._v(" "),_("p",[t._v("test4: test4")]),t._v(" "),_("p",[t._v("};")]),t._v(" "),_("p",[t._v("var func = types[type];")]),t._v(" "),_("p",[t._v("(!func) && throw new Error('Invalid value ' + type); func();")]),t._v(" "),_("h3",{attrs:{id:"_27-indexof-的按位操作简化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_27-indexof-的按位操作简化"}},[t._v("#")]),t._v(" 27. indexOf 的按位操作简化")]),t._v(" "),_("p",[t._v("在查找数组的某个值时，我们可以使用 indexOf() 方法。但有一种更好的方法，让我们来看一下这个例子。")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("if(arr.indexOf(item) > -1) { // item found")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("if(arr.indexOf(item) === -1) { // item not found")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("if(~arr.indexOf(item)) { // item found")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("if(!~arr.indexOf(item)) { // item not found")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("按位 (~) 运算符将返回 true（-1 除外），反向操作只需要!~。另外，也可以使用 include() 函数。")]),t._v(" "),_("p",[t._v("if (arr.includes(item)) {")]),t._v(" "),_("p",[t._v("// true if the item found")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("h3",{attrs:{id:"_28-object-entries"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28-object-entries"}},[t._v("#")]),t._v(" 28. Object.entries()")]),t._v(" "),_("p",[t._v("这个方法可以将对象转换为对象数组。")]),t._v(" "),_("p",[t._v("const data = { test1: 'abc', test2: 'cde', test3: 'efg' };")]),t._v(" "),_("p",[t._v("const arr = Object.entries(data);")]),t._v(" "),_("p",[t._v("console.log(arr);")]),t._v(" "),_("p",[t._v("/** Output:")]),t._v(" "),_("p",[t._v("[ [ 'test1', 'abc' ],")]),t._v(" "),_("p",[t._v("[ 'test2', 'cde' ],")]),t._v(" "),_("p",[t._v("[ 'test3', 'efg' ]")]),t._v(" "),_("p",[t._v("]")]),t._v(" "),_("p",[t._v("**/")]),t._v(" "),_("h3",{attrs:{id:"_29-object-values"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_29-object-values"}},[t._v("#")]),t._v(" 29. Object.values()")]),t._v(" "),_("p",[t._v("这也是 ES8 中引入的一个新特性，它的功能类似于 Object.entries()，只是没有键。")]),t._v(" "),_("p",[t._v("const data = { test1: 'abc', test2: 'cde' };")]),t._v(" "),_("p",[t._v("const arr = Object.values(data);")]),t._v(" "),_("p",[t._v("console.log(arr);")]),t._v(" "),_("p",[t._v("/** Output:")]),t._v(" "),_("p",[t._v("[ 'abc', 'cde']")]),t._v(" "),_("p",[t._v("**/")]),t._v(" "),_("h3",{attrs:{id:"_30-双重按位操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_30-双重按位操作"}},[t._v("#")]),t._v(" 30. 双重按位操作")]),t._v(" "),_("p",[t._v("// Longhand")]),t._v(" "),_("p",[t._v("Math.floor(1.9) === 1 // true")]),t._v(" "),_("p",[t._v("// Shorthand")]),t._v(" "),_("p",[t._v("~~1.9 === 1 // true")]),t._v(" "),_("h3",{attrs:{id:"_31-重复字符串多次"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_31-重复字符串多次"}},[t._v("#")]),t._v(" 31. 重复字符串多次")]),t._v(" "),_("p",[t._v("为了重复操作相同的字符，我们可以使用 for 循环，但其实还有一种简便的方法。")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("let test = '';")]),t._v(" "),_("p",[t._v("for(let i = 0; i < 5; i ++) {")]),t._v(" "),_("p",[t._v("test += 'test ';")]),t._v(" "),_("p",[t._v("}")]),t._v(" "),_("p",[t._v("console.log(str); // test test test test test")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("'test '.repeat(5);")]),t._v(" "),_("h3",{attrs:{id:"_32-查找数组的最大值和最小值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_32-查找数组的最大值和最小值"}},[t._v("#")]),t._v(" 32. 查找数组的最大值和最小值")]),t._v(" "),_("p",[t._v("const arr = [1, 2, 3];")]),t._v(" "),_("p",[t._v("Math.max(…arr); // 3")]),t._v(" "),_("p",[t._v("Math.min(…arr); // 1")]),t._v(" "),_("h3",{attrs:{id:"_33-获取字符串的字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_33-获取字符串的字符"}},[t._v("#")]),t._v(" 33. 获取字符串的字符")]),t._v(" "),_("p",[t._v("let str = 'abc';")]),t._v(" "),_("p",[t._v("//Longhand")]),t._v(" "),_("p",[t._v("str.charAt(2); // c")]),t._v(" "),_("p",[t._v("//Shorthand")]),t._v(" "),_("p",[t._v("str[2]; // c")]),t._v(" "),_("h3",{attrs:{id:"_34-指数幂简化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_34-指数幂简化"}},[t._v("#")]),t._v(" 34. 指数幂简化")]),t._v(" "),_("p",[t._v("//longhand")]),t._v(" "),_("p",[t._v("Math.pow(2,3); // 8")]),t._v(" "),_("p",[t._v("//shorthand")]),t._v(" "),_("p",[t._v("2**3 // 8")])])}),[],!1,null,null,null);_.default=a.exports}}]);