(window.webpackJsonp=window.webpackJsonp||[]).push([[482],{820:function(s,n,a){"use strict";a.r(n);var t=a(7),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[n("code",[s._v("call")]),s._v(", "),n("code",[s._v("apply")]),s._v(", 和 "),n("code",[s._v("bind")]),s._v(" 是 "),n("code",[s._v("JavaScript")]),s._v(" 中常用的函数。它们的作用是在"),n("code",[s._v("函数调用时动态地改变函数的上下文")]),s._v("。具体来说，它们可以指定函数中的 "),n("code",[s._v("this")]),s._v(" 指向哪个对象，以及传递参数给函数。")]),s._v(" "),n("h2",{attrs:{id:"call和apply"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call和apply"}},[s._v("#")]),s._v(" call和apply")]),s._v(" "),n("p",[s._v("其中call和apply是类似的，call访问的传递的参数是一个对象，而apply传递的参数是一个数组。")]),s._v(" "),n("h3",{attrs:{id:"call的应用实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call的应用实例"}},[s._v("#")]),s._v(" call的应用实例：")]),s._v(" "),n("p",[s._v("函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("fn.call(ctx, arg1, arg2, ...)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const obj = {\nname: "test"\nfn: function(){\nconsole.log("this is a ", this.name)\n}\n}\nobj.fn() //输出"this is a test"\n\nconst test2 = { name: "test2" }\nobj.fn.call(test2) // 输出"this is a test2"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"bind的应用实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind的应用实例"}},[s._v("#")]),s._v(" bind的应用实例")]),s._v(" "),n("p",[s._v("函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function.apply(context, [argsArray])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const obj = {\nname: "test"\nfn: function(arg1, arg2){\nconsole.log(`this is a ${this.name}, and this prams is ${arg1} and ${arg2}`);\n}\n}\nobj.fn("test11", "test12") //输出"this is a test, and this prams is test11 and test12"\n\nconst test2 = { name: "test2" }\nobj.fn.apply(test2, ["test22","test23"]) // 输出"this is a test2, and this prams is test22 and test23"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"bind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[s._v("#")]),s._v(" bind")]),s._v(" "),n("p",[s._v("bind"),n("code",[s._v("函数与")]),s._v("call"),n("code",[s._v("和")]),s._v("apply"),n("code",[s._v("函数不同，它不会立即调用函数。相反，它")]),s._v("返回一个新函数`，该函数将绑定到指定的上下文，当该函数被调用时，它将以指定的上下文运行。它的语法如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function.bind(ctx, arg1, arg2, ...)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const obj = {\nname: "test"\nfn: function(arg1, arg2){\nconsole.log(`this is a ${this.name}, and this prams is ${arg1} and ${arg2}`);\n}\n}\n\nconst test2 = { name: "test2" }\nconst bindFn = obj.fn.bind(test2, "test22")\nbindFn("testBind")\n// 输出"this is a test2, and this prams is test22 and testBind"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[s._v("#")]),s._v(" 实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 实现 call 方法\nFunction.prototype.myCall = function (context, ...args) {\n  // 如果 context 参数为空，则默认为 window 对象\n  context = context || window;\n  // 使用 Symbol 函数创建一个唯一的标识符\n  const fnSymbol = Symbol();\n  // 将原始函数存储为 context 对象的属性\n  context[fnSymbol] = this;\n  // 调用函数并将结果存储在 result 变量中\n  const result = context[fnSymbol](...args);\n  // 删除 context 对象的属性\n  delete context[fnSymbol];\n  // 返回函数的结果\n  return result;\n};\n\n// 实现 apply 方法\nFunction.prototype.myApply = function (context, args) {\n  // 如果 context 参数为空，则默认为 window 对象\n  context = context || window;\n  // 使用 Symbol 函数创建一个唯一的标识符\n  const fnSymbol = Symbol();\n  // 将原始函数存储为 context 对象的属性\n  context[fnSymbol] = this;\n  // 调用函数并将结果存储在 result 变量中\n  const result = context[fnSymbol](...args);\n  // 删除 context 对象的属性\n  delete context[fnSymbol];\n  // 返回函数的结果\n  return result;\n};\n\n// 实现 bind 方法\nFunction.prototype.myBind = function (context, ...args) {\n  // 将 this 存储在 fn 变量中\n  const fn = this;\n  // 返回一个新的函数，该函数将传入的参数与新函数的参数合并，并在新的上下文中使用 apply 调用原始函数\n  return function (...newArgs) {\n    return fn.apply(context, [...args, ...newArgs]);\n  };\n};\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br")])]),n("p",[s._v("下面对其中一个函数进行详细的分析：")]),s._v(" "),n("p",[s._v("函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Function.prototype.myCall = function (context, ...args) {\n  \n  context = context || window;\n  \n  const fnSymbol = Symbol();\n  \n  context[fnSymbol] = this;\n  \n  const result = context[fnSymbol](...args);\n  \n  delete context[fnSymbol];\n  \n  return result;\n};}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("分析")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n\n这是一个自定义的 JavaScript 函数 myCall，它被添加到 Function.prototype 上，以便能够在任何函数对象上调用。\n\n该函数的作用是模拟实现 Function.prototype.call 方法，用于在指定的上下文（context）中调用函数，并传递参数（args）。\n\n下面是对该函数的解释：\n\ncontext = context || window;：这行代码用于设置默认的上下文对象，如果没有传入上下文对象，则默认为全局对象 window。\n\nconst fnSymbol = Symbol();：这行代码创建了一个唯一的 Symbol 作为临时属性名，用于在上下文对象中存储需要调用的函数。\n\ncontext[fnSymbol] = this;：这行代码将当前函数对象（调用 myCall 的函数）赋值给上下文对象的临时属性，以便稍后调用。\n\nconst result = context[fnSymbol](...args);：这行代码通过上下文对象的临时属性，调用存储的函数，并传递参数。结果将被保存在 result 变量中。\n\ndelete context[fnSymbol];：这行代码删除上下文对象的临时属性，以清理不再需要的临时数据。\n\nreturn result;：这行代码返回调用函数后的结果。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h2",{attrs:{id:"面试回答"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面试回答"}},[s._v("#")]),s._v(" 面试回答")]),s._v(" "),n("p",[s._v("通常虽然是三个函数，但分为两类，call和apply是及时调用，而bind是返回一个函数，call和apply的区别在于call的参数是一个对象而bind的参数是一个数组，bind是返回一个函数等到调用的时候再执行。这三者的实现思路有点类似于装饰器模式，动态的给函数添加功能，而这三个函数是动态的调用函数上下文内容。")])])}),[],!1,null,null,null);n.default=e.exports}}]);