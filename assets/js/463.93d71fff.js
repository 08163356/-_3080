(window.webpackJsonp=window.webpackJsonp||[]).push([[463],{799:function(s,n,t){"use strict";t.r(n);var a=t(7),i=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("js中传参数直接传this有什么影响：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. 如果函数是使用箭头函数定义的，则 `this` 参数将被忽略，而函数将使用定义时的 `this` 值。\n\n2. 如果函数是使用普通函数定义的，则 `this` 参数将被视为普通参数，而函数将使用调用时的 `this` 值。这可能会导致函数内部的 `this` 值与预期不符。\n\n例如，以下代码将 `this` 作为参数传递给普通函数 `myFunction`：\n\n​```javascript\nfunction myFunction(param) {\n  console.log(param);\n}\n\nmyFunction(this);\n\x3c!-- more --\x3e\n​```\n\n在这种情况下，`this` 参数将被视为普通参数，而函数将使用调用时的 `this` 值。如果该代码片段在全局作用域中执行，则 `this` 值为 `window` 对象；如果该代码片段在某个对象的方法中执行，则 `this` 值为该对象。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("js中传参数直接传this是否会影响性能")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("在 JavaScript 中，将 `this` 作为参数直接传递给函数不会对性能产生显著影响。JavaScript 引擎在处理函数参数时，会将 `this` 参数视为普通参数，与其他参数一样进行处理。因此，将 `this` 作为参数传递给函数与将其他参数传递给函数的性能相当。\n\n在实际开发中，通常会将 `this` 作为参数传递给回调函数，以确保回调函数在执行时使用正确的 `this` 值。这种做法在性能上没有问题，而且可以避免由于 `this` 值不正确而导致的错误。\n\n需要注意的是，如果在函数内部频繁地使用 `this`，可能会对性能产生影响。这是因为每次访问 `this` 都需要进行作用域链查找，这可能会导致函数执行变慢。为了避免这种情况，可以将 `this` 值缓存到变量中，然后在函数内部使用该变量。这样可以避免频繁的作用域链查找，提高函数执行效率。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])])}),[],!1,null,null,null);n.default=i.exports}}]);