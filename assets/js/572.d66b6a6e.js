(window.webpackJsonp=window.webpackJsonp||[]).push([[572],{910:function(e,a,_){"use strict";_.r(a);var v=_(7),r=Object(v.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("思考")]),e._v(" "),a("p",[e._v("我想用了解这个东西的原因：是前端需要进行样式的兼容，有的设备上浏览器版本较低，有的设备版本较高，不同设备或者机型之间可能存在不同的浏览器。")]),e._v(" "),a("p",[e._v("我想提前做一个样式统一的东西，避免到时候不同版本的时候导致样式不兼容，A机器上更改了之后B机器上又不适用，导致这个B又被修改，改了之后A又不适用，紧急情况下又只能拉分支去解决问题，导致项目的可维护性越来越差。")]),e._v(" "),a("h2",{attrs:{id:"babel-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-是什么"}},[e._v("#")]),e._v(" Babel 是什么？")]),e._v(" "),a("p",[e._v("只要你想使用新语法、新 "),a("code",[e._v("API")]),e._v("，而你的产品使用用户的使用环境又存在着与你想要使用的语法的兼容问题，那 "),a("code",[e._v("babel")]),e._v(" 基本会成为项目中必不可少的部分。")]),e._v(" "),a("p",[e._v("Babel 是一个JavaScript 编译器。 用通俗的话解释就是它"),a("strong",[e._v("主要用于将高版本的JavaScript代码转为向后兼容的JS代码，从而能让我们的代码运行在更低版本的浏览器或者其他的环境中")]),e._v("。 Babel就是做了这样的编译转换工作，来让我们不用考虑浏览器的兼容性问题，只要专心于代码的编写工作。")]),e._v(" "),a("h2",{attrs:{id:"babel版本及区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel版本及区别"}},[e._v("#")]),e._v(" Babel版本及区别")]),e._v(" "),a("ul",[a("li",[e._v("2015-02-15，6to5重命名为babel")]),e._v(" "),a("li",[e._v("2015-03-31，babel 5.0发布")]),e._v(" "),a("li",[e._v("2015-10-30，babel 6.0发布")]),e._v(" "),a("li",[e._v("2018-08-27，babel 7.0发布")])]),e._v(" "),a("p",[e._v("babel5及之前是一个包含CLI工具+编译器+转换器的集合工具包；babel6之后进行了拆分，集合包被分成多个包：")]),e._v(" "),a("ul",[a("li",[e._v("babel-cli，其中包含babel命令行界面")]),e._v(" "),a("li",[e._v("babel-core，包括了Node有关的API和require钩子")]),e._v(" "),a("li",[e._v("babel-polyfill，可以建立一个完整的ES2015环境")])]),e._v(" "),a("p",[e._v("babel6默认情况下不携带任何转换器，需要自行安装所需的插件和转换器，通过"),a("code",[e._v("babel-xxx")]),e._v("来安装对应的工具包。")]),e._v(" "),a("p",[e._v("而Babel7用了npm的private scope，把所有的包都挂载"),a("code",[e._v("@babel")]),e._v("下，通过"),a("code",[e._v("@babel/xxx")]),e._v("来安装，不用在node_modules下看到一堆的babel-xxx包。")]),e._v(" "),a("h2",{attrs:{id:"babel的运行方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel的运行方式"}},[e._v("#")]),e._v(" Babel的运行方式")]),e._v(" "),a("p",[e._v("总共可以分为三个阶段：解析（parsing）、转换（transforming）和生成（generating）；负责解析阶段的插件是"),a("code",[e._v("@babel/parser")]),e._v("，其作用就是将源码解析成AST；而负责生成阶段的插件是"),a("code",[e._v("@babel/generator")]),e._v("，其作用就是将转好好的AST重新生成代码。")]),e._v(" "),a("p",[e._v("而@babel/core本身不具备转换处理的功能，它把转换的功能拆分到一个个插件（plugins）中；因此当我们不添加任何插件的时候，输入输出代码是相同的。")]),e._v(" "),a("p",[e._v("在@babel/core转换时还有几个副产物：code、mast和map，我们可以通过"),a("code",[e._v("options")]),e._v("配置，根据需要对这几个副产物进行选择性的输出。除了"),a("code",[e._v("transform")]),e._v("这个转换方法，还有"),a("code",[e._v("transformSync")]),e._v("、"),a("code",[e._v("transformAsync")]),e._v("和"),a("code",[e._v("transformFileSync")]),e._v("等同步异步API，可以在"),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.babeljs.cn%2Fdocs%2Fbabel-core",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel官网"),a("OutboundLink")],1),e._v("找到。Babel插件和预设")]),e._v(" "),a("p",[e._v("Babel的插件大致可以分为"),a("code",[e._v("语法插件")]),e._v("和"),a("code",[e._v("转换插件")]),e._v("：")]),e._v(" "),a("ul",[a("li",[e._v("语法插件：作用于解析阶段，使得babel能够解析更多的语法，官方的语法插件以"),a("code",[e._v("babel-plugin-syntax")]),e._v("开头。")]),e._v(" "),a("li",[e._v("转换插件：在转换这一步把源码转换并输出，官方的转换插件以"),a("code",[e._v("babel-plugin-transform")]),e._v("（正式）"),a("code",[e._v("或 babel-plugin-proposal")]),e._v("（提案）开头。")])]),e._v(" "),a("blockquote",[a("p",[e._v("转换插件将启用相应的语法插件，因此不必同时指定这两种插件。")])]),e._v(" "),a("p",[e._v("语法插件虽名为插件，但其本身并不具有功能性。语法插件所对应的语法功能其实都已在"),a("code",[e._v("@babel/parser")]),e._v("里实现，插件的作用只是将对应语法的解析功能打开。所以本文提及的 Babel 插件将专指转换插件。")]),e._v(" "),a("p",[e._v("Babel官网提供了近一百个插件，但是如果我们的代码中一个一个的配置插件就需要对每一个插件有所了解，这样必然会耗费大量的时间精力；为此，Babel提供了预设（presets）的概念，意思就是预先设置好的一系列插件包；这就相当于肯德基中的套餐，将众多产品进行搭配组合，适合不同的人群需要；总有一款适合我们的套餐。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6901649054225465352",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考链接"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"问题汇总"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题汇总"}},[e._v("#")]),e._v(" 问题汇总")]),e._v(" "),a("p",[e._v("什么是source map，作用是什么？")]),e._v(" "),a("p",[e._v("那CSS和HTML要进行兼容的话应该用什么工具进行兼容呢？")]),e._v(" "),a("p",[e._v("我是不是可以根据编译生成的中间产物，根据混淆的代码反编译生成能认识的代码啊？")]),e._v(" "),a("p",[e._v("polyfill 和 runtime的区别")]),e._v(" "),a("h2",{attrs:{id:"随笔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随笔"}},[e._v("#")]),e._v(" 随笔")]),e._v(" "),a("p",[e._v("用配置的方式去进行兼容性处理确实比用ifelse 的方式去进行兼容性处理好一些")]),e._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),a("h2",{attrs:{id:"参考连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考连接"}},[e._v("#")]),e._v(" 参考连接")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.babeljs.cn/docs/babel-core",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);