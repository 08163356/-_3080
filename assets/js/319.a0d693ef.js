(window.webpackJsonp=window.webpackJsonp||[]).push([[319],{655:function(s,n,a){"use strict";a.r(n);var e=a(7),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("看到一个哥们面了好几家公司，然后我想着既然把别人的面试题自己回答会了之后不是相当于参加了次面试吗？我决定我先个人思考一会儿之后让gpt给我回答，然后再用自己的话说一遍：")]),s._v(" "),n("p",[s._v("第一次发他给我的回复：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("当然，作为前端面试者，我会尽力以清晰、有层次的方式回答您的问题，并提供一些实际应用场景作为扩展。\n\n1. 请介绍一下 Vue.js 的响应式原理是什么？\n\nVue.js的响应式原理是通过使用 Object.defineProperty() 来劫持对象的属性访问，从而实现对数据的监听和自动更新视图。当数据发生变化时，Vue会自动检测到变化，并触发相应的更新操作。这种机制使得开发者能够以声明式的方式编写代码，无需手动操作DOM，提高了开发效率。\n\n一个实际应用场景是在表单处理中。通过使用Vue的响应式原理，我们可以轻松地监听表单数据的变化，并实时更新视图。例如，当用户在输入框中输入内容时，Vue会自动更新绑定的数据，并且可以触发相应的验证逻辑或其他业务逻辑。\n\n另一个应用场景是在实时数据展示中。通过与后端建立WebSocket连接，可以将实时数据推送到前端，然后利用Vue的响应式机制，自动更新相关的视图。这在实时聊天、股票行情等场景中非常常见。\n\n2. 请谈谈您对前端性能优化的理解，并举例说明一些常见的优化策略。\n\n前端性能优化是提高网页加载速度、响应速度和用户体验的一系列技术和策略。以下是一些常见的优化策略：\n\n- 文件压缩和合并：将多个CSS和JavaScript文件压缩为单个文件，并使用工具进行文件压缩，减少文件大小和网络请求次数。\n- 图片优化：使用适当的图片格式、压缩算法和尺寸来减小图片文件大小，同时保持良好的视觉质量。\n- 懒加载：延迟加载页面中的非关键资源，如图片和视频，以减少页面的初始加载时间。\n- 缓存机制：利用浏览器缓存机制，将重复请求的资源缓存到本地，减少服务器请求和数据传输。\n- 代码优化：优化JavaScript代码，减少不必要的计算、避免重复操作和使用高效的算法，提高代码执行效率。\n- 延迟执行和异步加载：将非关键的JavaScript代码延迟执行或使用异步加载方式，减少页面加载的阻塞时间。\n- 响应式设计：采用响应式布局和媒体查询，使网页能够适应不同设备和屏幕尺寸，提供更好的用户体验。\n\n举个例子，图片优化是一种常用的性能优化策略。通过对图片进行适当的压缩和优化，可以减小图片文件大小，减少页面加载时间。例如，使用图片压缩工具对图片进行压缩，并选择适当的图片格式，如JPEG、PNG等。此外，可以使用图片懒加载技术，只在图片进入可视区域时再进行加载，减少初始页面加载的数据量，提高页面加载速度和用户体验。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("gpt的prompt：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("现在我作为前端面试官对你提问，请你根据我的问题以面试者的身份做回答，要求语言逻辑清晰有层次，回答有深度，略微进行一部分广度扩展，并且列举一两个该技术点实际应用场景\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_1-bfc是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-bfc是什么"}},[s._v("#")]),s._v(" 1.BFC是什么？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\nBFC（块级格式化上下文）是一种在 CSS 布局中的概念，它是一个独立的渲染区域，具有一系列的规则来决定其内部元素的布局和渲染方式。\n\nBFC 主要用于解决一些常见的布局问题，如浮动元素引起的父元素高度塌陷、外边距重叠等。\n\nBFC 具有以下特性：\n- 内部的块级元素在垂直方向上一个接一个地放置；\n- 垂直方向上的外边距会发生折叠；\n- BFC 的区域不会与浮动元素重叠；\n- BFC 可以包含浮动的子元素，不会导致父元素高度塌陷。\n\n实际应用场景：\n- 清除浮动：通过创建一个 BFC，可以清除浮动元素引起的父元素高度塌陷。可以通过给父元素设置 `overflow: hidden` 或 `display: flow-root` 来创建 BFC。\n- 阻止外边距重叠：两个相邻的块级元素的外边距会发生重叠，但如果其中一个元素属于一个 BFC，那么它们的外边距将会分离开来，不再重叠。\n- 创建多栏布局：通过创建多个 BFC，可以实现多栏布局，让多个列独立布局并避免相互影响。\n\n总之，BFC 是一个非常有用的 CSS 布局概念，能够解决一些常见的布局问题，提供更好的控制和布局方式。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("自己回答：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("BFC是CSS中的一常见布局方式，通过设置父元素的overflow或者display来形成bfc布局，使得BFC元素不会和浮动元素发生重叠。通常用于清除浮动、多栏布局、防止外边距重叠\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_2-display有哪些属性值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-display有哪些属性值"}},[s._v("#")]),s._v(" 2.display有哪些属性值")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("`display` 属性用于指定元素的显示方式，它有以下常见的取值：\n\n1. `block`：将元素显示为块级元素，会独占一行，默认情况下会撑满父元素的宽度。\n2. `inline`：将元素显示为内联元素，不会独占一行，只占据其内容所需的宽度。\n3. `inline-block`：将元素显示为内联块级元素，不会独占一行，可以设置宽高和内外边距。\n4. `none`：将元素完全隐藏，不占据空间，并且不会影响其他元素的布局。\n5. `flex`：将元素显示为弹性容器，可以使用弹性布局来调整子元素的排列方式。\n6. `grid`：将元素显示为网格容器，可以使用网格布局来调整子元素的排列方式。\n7. `table`：将元素显示为表格，可以使用表格布局来调整子元素的排列方式。\n8. `inline-table`：将元素显示为内联表格，不独占一行，可以使用表格布局。\n9. `table-cell`：将元素显示为表格单元格，必须在表格容器内使用，可以调整单元格的排列方式。\n10. `table-row`：将元素显示为表格行，必须在表格容器内使用，可以调整行的排列方式。\n\n除了上述常见的取值，`display` 属性还有其他一些取值，如 `list-item`、`run-in`、`inherit`、`initial` 等，用于特定的布局需求。\n\n需要注意的是，不同的 `display` 取值会对元素的布局和盒模型产生不同的影响，因此在使用时需要根据具体情况进行选择。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("常用的有block、inline、flex、grid、none等属性\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_3-讲一下flex弹性布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-讲一下flex弹性布局"}},[s._v("#")]),s._v(" 3.讲一下flex弹性布局")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Flex 弹性布局（Flexbox）是一种用于创建灵活且自适应的布局模型，通过使用 Flex 容器和 Flex 项目来实现。它提供了一套灵活的属性，用于控制元素在容器中的排列和分布方式。\n\nFlex 布局的主要概念包括 Flex 容器和 Flex 项目：\n\n1. Flex 容器（Flex Container）：通过设置容器的 `display: flex` 或 `display: inline-flex` 属性来创建一个 Flex 容器。容器内的子元素成为 Flex 项目。Flex 容器是父级元素，用于包含和布局 Flex 项目。\n\n2. Flex 项目（Flex Items）：Flex 容器内的子元素称为 Flex 项目。每个 Flex 项目都有一些默认的属性和行为，可以通过设置容器的属性来调整它们的布局。\n\n使用 Flex 布局时，常用的属性有：\n\n- `flex-direction`：指定 Flex 项目的排列方向，可以是水平方向（`row`）、水平方向反转（`row-reverse`）、垂直方向（`column`）或垂直方向反转（`column-reverse`）。\n- `flex-wrap`：指定 Flex 项目的换行方式，可以是不换行（`nowrap`）、换行并在垂直方向上紧凑排列（`wrap`）或换行并在垂直方向上间隔排列（`wrap-reverse`）。\n- `justify-content`：指定 Flex 项目在主轴上的对齐方式，可以是居左（`flex-start`）、居中（`center`）、居右（`flex-end`）、空白平均分布（`space-between`）或空白平均分布且两端对齐（`space-around`）。\n- `align-items`：指定 Flex 项目在交叉轴上的对齐方式，可以是居上（`flex-start`）、居中（`center`）、居下（`flex-end`）、基线对齐（`baseline`）或拉伸以填充容器（`stretch`）。\n- `align-content`：指定多行 Flex 项目在交叉轴上的对齐方式，可以是居上（`flex-start`）、居中（`center`）、居下（`flex-end`）、空白平均分布（`space-between`）或空白平均分布且两端对齐（`space-around`）。\n\nFlex 布局的优势在于它能够轻松地实现灵活的盒模型、自适应的布局和对齐方式的控制。它适用于构建可伸缩的导航栏、网格系统、居中布局等多种布局需求。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("弹性布局在工作中比较常用，通常用来清除浮动、用来居中对齐、用于一样当中显示多列内容，常见的圣杯布局什么的都是使用弹性布局实现的。我自己最常用的就是设置justity-content来设置居中、两端对齐。像可伸缩的导航栏、网格系统、居中布局也是通过flex布局实现的\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_3-讲一下es6常用语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-讲一下es6常用语法"}},[s._v("#")]),s._v(" 3.讲一下ES6常用语法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ES6（ECMAScript 2015）是 JavaScript 的一个版本，引入了许多新的语法和功能，为开发者提供了更强大和便捷的工具。下面是一些 ES6 中常用的语法和功能：\n\n1. 块级作用域声明：\n   - `let`：用于声明块级作用域的变量，替代了 `var`。\n   - `const`：用于声明块级作用域的常量，声明后不可重新赋值。\n\n2. 箭头函数：\n   - `() => {}`：使用箭头函数语法创建函数表达式，简化了函数定义的语法。\n\n3. 模板字面量：\n   - `` `...` ``：使用反引号包围的字符串，可以在其中插入变量或表达式，使用 `${}` 进行插值。\n\n4. 解构赋值：\n   - `const { prop1, prop2 } = object`：可以从对象中解构出特定属性并赋值给变量。\n   - `const [item1, item2] = array`：可以从数组中解构出特定项并赋值给变量。\n\n5. 默认参数：\n   - `function foo(param = defaultValue) {}`：可以为函数参数设置默认值。\n\n6. 扩展运算符：\n   - `...`：用于将数组或对象展开为多个参数或多个属性。\n\n7. 类和模块：\n   - `class`：用于定义类，支持面向对象的编程。\n   - `import` 和 `export`：用于模块的导入和导出，提供了模块化的开发方式。\n\n8. Promise：\n   - `new Promise((resolve, reject) => {})`：用于处理异步操作，提供了更好的控制流程和错误处理的能力。\n\n9. 简化的对象字面量：\n   - `{ prop1, prop2 }`：在对象字面量中，可以省略键和值相同的部分。\n\n10. 迭代器和生成器：\n    - `Symbol.iterator`：定义可迭代对象的迭代器函数。\n    - `function*`：定义生成器函数，用于生成迭代器。\n\n这只是 ES6 中的一些常用语法和功能，还有许多其他功能，如模块化、数组和对象的新方法、Map 和 Set 等数据结构等。ES6 的引入极大地改进了 JavaScript 的开发体验和功能，使得开发者能够更加高效和简洁地编写代码。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("p",[s._v("比较常用的就是箭头函数、import和export、数组的includes方法、还有class、模板字符串、扩展运算符、promise、let和const，还有一些可能用但是一时想不起来了")]),s._v(" "),n("h2",{attrs:{id:"_4-for-in和for-of的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-for-in和for-of的区别"}},[s._v("#")]),s._v(" 4.for…in和for…of的区别")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("两者都可以用于遍历，不过for in遍历的是数组的索引（index），而for of遍历的是数组元素值（value）\nfor in遍历的是数组的索引（即键名），而for of遍历的是数组元素值\n\nfor in总是得到对象的key或数组、字符串的下标\n\nfor of总是得到对象的value或数组、字符串的值\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"_5-reduce方法。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-reduce方法。"}},[s._v("#")]),s._v(" 5.reduce方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("用于对数组中的每个元素进行累积操作，最终返回一个累积结果。\n\n具体用途：\n\n累加数组中的所有元素，得到总和。\n将数组中的元素相乘，得到乘积。\n将数组中的元素拼接成一个字符串。\n根据数组中的元素计算平均值。\n找出数组中的最大或最小值。\n对数组中的元素进行分组或分类。\nreduce() 方法接受两个参数：累积回调函数和初始值。累积回调函数接受四个参数：累积值（上一次回调的返回值或初始值）、当前值、当前索引和原始数组。回调函数通过对每个元素进行操作，并将结果累积到下一次回调中，最终返回累积结果。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("如果空数组调用的话，会跑出type error的错误")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7309293844427882534?share_token=88beec89-06ad-4cb8-8a23-b8fd540bd9b1",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文档"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=t.exports}}]);