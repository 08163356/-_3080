(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{490:function(s,n,a){"use strict";a.r(n);var t=a(7),l=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("一、虚函数学习")]),s._v(" "),n("p",[s._v("1.什么是虚函数？")]),s._v(" "),n("p",[s._v("本质不是重载而是覆盖。")]),s._v(" "),n("p",[s._v("2.虚函数有什么作用？")]),s._v(" "),n("p",[s._v("实现多态。同一个声明的不同实现。")]),s._v(" "),n("p",[s._v("3.子类重写父类的普通函数和子类重写父类的虚函数有什么区别？")]),s._v(" "),n("p",[s._v("可以让成员函数的操作一般化，用基类的指针指向不同的派生类对象时，基类指针调用其虚函数成员函数，则会调用其真正指向对象的成员函数，而不是基类中定义的成员函数（只要派生类改写了该成员函数）")]),s._v(" "),n("p",[s._v("若不是虚函数，则不管基类指针指向的哪个派生类的对象，调用时都会调用基类中定义的哪个函数。")]),s._v(" "),n("p",[s._v("个人理解：就像论文初稿（基类），一稿、二稿、三稿（三个派生类），如果初稿没有定义为虚函数那么访问一稿二稿三稿的时候只能看到初稿，但是如果定义为虚函数，只要派生类重写了虚函数，就想看哪个稿子都可以。")]),s._v(" "),n("p",[s._v("4.应用场景")]),s._v(" "),n("p",[s._v("4.1 开发中会使用框架，开发人员无法对框架中的函数进行修改。对基类中的函数进重写之后有的函数是用框架调用的。不使用虚函数则只能使用原框架中的函数，使用虚函数后则实现多态，能自己定义符合自己使用场景的函数。")]),s._v(" "),n("p",[s._v("4.2")]),s._v(" "),n("p",[s._v("二、其他问题总结")]),s._v(" "),n("p",[s._v("1.纯虚函数。")]),s._v(" "),n("p",[s._v("基类中只声明虚函数但是不实现，要求在子类中必须实现。")]),s._v(" "),n("p",[s._v("定义方法：virtual Functiontype FunctionName()=0;")]),s._v(" "),n("p",[s._v("和虚函数的区别是虚函数在基类中实现了的，子类进行覆盖。")]),s._v(" "),n("p",[s._v("2.C++的多态性")]),s._v(" "),n("p",[s._v("编译时多态性：通过重载函数实现\n运行时多态性：通过虚函数实现")]),s._v(" "),n("p",[s._v("要实现多态需要：一是公有继承、二是虚函数。")]),s._v(" "),n("p",[s._v("3.虚函数调用方式")]),s._v(" "),n("p",[s._v("通过基类的指针或引用。根据指针指向不同的对象决定调用哪个函数。")]),s._v(" "),n("p",[s._v("三、其他知识点总结")]),s._v(" "),n("p",[s._v("1.虚函数是动态绑定的基础。是非静态的成员函数。")]),s._v(" "),n("p",[s._v("2.virtual只能在声明的时候使用，实现的时候不能加。")]),s._v(" "),n("p",[s._v("3.具有继承性。基类中声明的虚函数在派生类中无论是否说明，同原型函数都自动为虚函数。")]),s._v(" "),n("p",[s._v("4.虚继承（不推荐，别用）")]),s._v(" "),n("p",[s._v("为了解决多重继承而实现的。若D直接继承B1、B2则A中的参数会在B中出现两次，浪费空间。使用虚继承则会节省空间。")]),s._v(" "),n("p",[s._v("class A;")]),s._v(" "),n("p",[s._v("class B1: public virtual A;")]),s._v(" "),n("p",[s._v("class B2: public virtual A;")]),s._v(" "),n("p",[s._v("class D: public  B1, public B2;")]),s._v(" "),n("p",[s._v("四、show me code")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#include<iostream>\nusing namespace std;\nclass A{\n    public:\n    virtual void foo()\n    {\n        cout<<\"A'foo\"<<endl;\n        bar();\n    }\n    virtual void bar()\n    {\n        cout<<\"A's bar\"<<endl;\n    }\n};\nclass B: public A{\n    public:\n    virtual void foo()\n    {\n        cout<<\"B'foo\"<<endl;\n        A::foo();\n    }\n    virtual void bar()\n    {\n        cout<<\"B's bar\"<<endl;\n    }\n};\nint main()\n{\n    B bobj;\n    A *aptr=&bobj;//\n    aptr->foo();\n    A aobj=*aptr;\n    aobj.foo();\n}\n/*\naptr->foo()输出结果是：\n   B's foo()//这个明白，多态性\n   A's foo()//这个也明白,执行A::foo();\n   B's bar()// 虽然调用的是这个函数:A::foo(); 但隐式传入的还是bobj 的地址,所以再次调用bar();调用时还是会调用B的函数, 与虚函数指针有关\n\naobj.foo()输出结果是：\n  A's foo() // 这个不是指针,aobj完全是一个A的对象,与多态没有关系\n  A's bar() \n*/\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br")])])])}),[],!1,null,null,null);n.default=l.exports}}]);