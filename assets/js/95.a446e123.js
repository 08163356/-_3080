(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{432:function(s,n,e){"use strict";e.r(n);var a=e(7),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("C++描述队列的抽象数据类型")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const int maxsize=50;\nenum bool{false,true};\ntemplate<class T>\nclass Queue{\n    public:\n    Queue(){};\n    ~Queue(){};\n    virtual bool EnQueue(const T& x)=0;\n    virtual bool DeQueue(T& x)=0;\n    virtual bool getFront(T& x)=0;\n    virtual bool IsEmpty()const=0;\n    virtual bool IsFull()const=0;\n    virtual int getSize()const=0;\n\x3c!-- more --\x3e\n    \n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("基于数组实现的循环队列。")]),s._v(" "),n("p",[s._v("和栈有类似的地方。循环队列的判满方式是判断rear+1%maxsize=front是否满足条件。实现一个算法或者数据结构的过程是先给出类定义然后逐步的实现每个对应的方法。")]),s._v(" "),n("p",[s._v("循环队列的类定义及其实现")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include<iostream>\n#include<assert.h>\n#include "Queue.h"\ntemplate <class T>\n    class SeqQueue:public Queue<T>{\n        public:\n        SeqQueue(int sz=0);\n        ~SeqQueue(){delete [] elements;}\n        bool EnQueue(const T& x);\n        bool int DeQueue(T& x);\n        bool getFront(T& x);\n        bool IsEmpty()const{return (front=rear)?true:false;}\n        void makeEmpty(){front=rear=0;}\n        bool IsFull()const{return ((rear+1)%maxsize==front)?true:false;}\n        int getSize()const{return (rear-front+maxsize)%maxsize;}\n        friend ostream & operator<<(ostream& os,SeqQueue<T>& Q);\n        protected:\n        int rear,front;\n        T* elements;\n        int maxsize;\n    };\ntemplate<class T>\n    SeqQueue<T>::SeqQueue(int sz):front(0),rear(0),maxsize(sz){\n        elements=new T [maxsize];\n        assert(elements);\n    };\n\ntemplate<class T>\n    bool SeqQueue<T>::EnQueue(const T&x){\n        if(!IsFull())return false;\n        elements[rear]=x;\n        rear=(rear+1)%maxSize;\n        return true;\n    };\n    \ntemplate<class T>\n    bool SeqQueue<T>::DeQueue(T& x){\n        if(!IsEmpty())return false;\n        x=elements[front];\n        front=(front+1)%maxsize;\n        return true;\n    };\ntemplate<class T>\n     bool SeqQueue<T>:getFront(T& x)const{\n        if(!IsEmpty())return false;\n        x=elements[front];\n        return true;\n    };\ntemplate<class T>\n    ostream& operator<<(ostream& os,SeqQueue<T>& Q){\n    \n};\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);