(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{514:function(e,t,s){"use strict";s.r(t);var a=s(7),i=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1、利用-git-rm-命令撤销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、利用-git-rm-命令撤销"}},[e._v("#")]),e._v(" 1、利用“git rm”命令撤销；")]),e._v(" "),t("p",[e._v("1、被提交到仓库的某个文件需要删除，可以使用 "),t("code",[e._v("git rm")]),e._v(" 命令：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('git rm <file> // 从工作区和暂存区删除某个文件\ngit commit -m "" // 再次提交到仓库\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("2、如果只想从暂存区删除文件，本地工作区不做出改变，可以：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git rm --cached <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),e._v(" "),t("p",[e._v("3、如果在工作区不小心删错了某个文件，可以用 "),t("code",[e._v("git checkout")]),e._v(" 将暂存区的文件覆盖工作区的文件，从而把误删的文件恢复：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git checkout -- <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("4、用 "),t("code",[e._v("git rm")]),e._v(" 删除文件，同时还会将这个删除操作记录下来；")]),e._v(" "),t("p",[e._v("用 "),t("code",[e._v("rm")]),e._v(" 删除文件，删除的仅仅是本地物理文件，没有将其从 git 的记录中剔除。")]),e._v(" "),t("p",[e._v("5、"),t("code",[e._v("git add")]),e._v(" 和 "),t("code",[e._v("git rm")]),e._v(" 有相似的功能，")]),e._v(" "),t("p",[e._v("但 "),t("code",[e._v("git add")]),e._v(" 仅能记录添加、改动的动作，删除的动作需靠 "),t("code",[e._v("git rm")]),e._v(" 来完成。")]),e._v(" "),t("h2",{attrs:{id:"_2、利用-git-reset-命撤销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、利用-git-reset-命撤销"}},[e._v("#")]),e._v(" 2、利用“git reset”命撤销；")]),e._v(" "),t("p",[e._v("如果需要删除的不只是某个文件，而是交错的代码，那么有以下三种方法可以删除 commit 。")]),e._v(" "),t("p",[t("strong",[e._v("1、git reset")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git reset")]),e._v(" ：回滚到某次提交。")]),e._v(" "),t("li",[t("code",[e._v("git reset --soft")]),e._v("：此次提交之后的修改会被退回到暂存区。")]),e._v(" "),t("li",[t("code",[e._v("git reset --hard")]),e._v("：此次提交之后的修改不做任何保留，"),t("code",[e._v("git status")]),e._v(" 查看工作区是没有记录的。")])]),e._v(" "),t("p",[e._v("1）回滚代码")]),e._v(" "),t("p",[e._v("如果需要删除的 commit 是最新的，那么可以通过 "),t("code",[e._v("git reset")]),e._v(" 命令将代码回滚到之前某次提交的状态，但一定要将现有的代码做好备份，否则回滚之后这些变动都会消失。具体操作如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git log // 查询要回滚的 commit_id\ngit reset --hard commit_id // HEAD 就会指向此次的提交记录\ngit push origin HEAD --force // 强制推送到远端\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("2）误删恢复")]),e._v(" "),t("p",[e._v("如果回滚代码之后发现复制错了 commit_id，或者误删了某次 commit 记录，也可以通过下方代码恢复：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git relog // 复制要恢复操作的前面的 hash 值\ngit reset --hard hash // 将 hash 换成要恢复的历史记录的 hash 值\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("ol",[t("li",[e._v("注意：删除中间某次提交时最好不要用 "),t("code",[e._v("git reset")]),e._v(" 回退远程库，因为之后其他人提交代码时用 "),t("code",[e._v("git pull")]),e._v(" 也会把自己的本地仓库回退到之前的版本，容易出现差错进而增加不必要的工作量。")])]),e._v(" "),t("h2",{attrs:{id:"_3、利用-git-rebase-命令撤销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、利用-git-rebase-命令撤销"}},[e._v("#")]),e._v(" 3、利用“git rebase”命令撤销；")]),e._v(" "),t("p",[e._v("1）撤销提交")]),e._v(" "),t("p",[e._v("如果中间的某次 commit 需要删除，可以通过 "),t("code",[e._v("git rebase")]),e._v(" 命令实现，方法如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git log // 查找要删除的前一次提交的 commit_id\ngit rebase -i commit_id // 将 commit_id 替换成复制的值\n进入 Vim 编辑模式，将要删除的 commit 前面的 `pick` 改成 `drop`\n保存并退出 Vim\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("这样就完成了。")]),e._v(" "),t("p",[e._v("2）解决冲突")]),e._v(" "),t("h2",{attrs:{id:"_4、利用-git-revert-命令撤销。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、利用-git-revert-命令撤销。"}},[e._v("#")]),e._v(" 4、利用“git revert”命令撤销。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git revert")]),e._v("：放弃某次提交。\n"),t("code",[e._v("git revert")]),e._v(" 之前的提交仍会保留在 git log 中，而此次撤销会做为一次新的提交。")]),e._v(" "),t("li",[t("code",[e._v("git revert -m")]),e._v("：用于对 merge 节点的操作，-m 指定具体某个提交点。")])]),e._v(" "),t("p",[e._v("1）撤销提交")]),e._v(" "),t("p",[e._v("要撤销中间某次提交时，使用 "),t("code",[e._v("git revert")]),e._v(" 也是一个很好的选择：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git log // 查找需要撤销的 commit_id\ngit revert commit_id  // 撤销这次提交\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("2）撤销 merge 节点提交")]),e._v(" "),t("p",[e._v("如果这次提交是 merge 节点的话，则需要加上 "),t("code",[e._v("-m")]),e._v(" 指令：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('git revert commit_id -m 1 // 第一个提交点\n// 手动解决冲突\ngit add -A\ngit commit -m ""\ngit revert commit_id -m 2 // 第二个提交点\n// 重复 2，3，4\ngit push\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://www.yisu.com/zixun/620433.html#:~:text=1%EF%BC%89%E6%92%A4%E9%94%80%E6%8F%90%E4%BA%A4%20%E5%A6%82%E6%9E%9C%E4%B8%AD%E9%97%B4%E7%9A%84%E6%9F%90%E6%AC%A1%20commit%20%E9%9C%80%E8%A6%81%E5%88%A0%E9%99%A4%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%20git%20rebase%20%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%EF%BC%8C%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B%EF%BC%9A%20git,%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%B0%86%E8%A6%81%E5%88%A0%E9%99%A4%E7%9A%84%20commit%20%E5%89%8D%E9%9D%A2%E7%9A%84%20%60pick%60%20%E6%94%B9%E6%88%90%20%60drop%60%20%E4%BF%9D%E5%AD%98%E5%B9%B6%E9%80%80%E5%87%BA%20Vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考文档"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=i.exports}}]);