(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{455:function(s,n,r){"use strict";r.r(n);var e=r(7),a=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"一、领域规则模式之interpreter-解析器模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、领域规则模式之interpreter-解析器模式"}},[s._v("#")]),s._v(" 一、领域规则模式之Interpreter（解析器模式）")]),s._v(" "),n("p",[s._v("在特定领域中，某些变化虽然频繁，但可以抽象为某种规则。这时候，结合特定领域，将问题抽象为语法规则，从而给出在该领域获得一般性解决方案。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//实例\n#include<iostream>\n#include<map>\n#include<stack>\n\nusing namespace std;\nclass Expression{\npublic:\n    virtual int interpreter(map<char,int> var)=0;\n    virtual ~Expression(){};\n};\n\x3c!-- more --\x3e\nclass varExpression: public Expression{\n    char key;\npublic:\n    VarExpression(const char& key)\n    {\n        this->key=key;\n    }\n    int interpreter(map<char,int> var) override{\n        return var[key];\n    }\n};\n//符号表达式\nclass SymbolExpression: public Expression{\nprotected:\n    Expression * left;\n    Expression * right;\npublic:\n    symbolExpression(Expression* left,Expression* right):left(left),right(right){}\n};\n//减法运算\nclass SubExpression:public SymbolExpression{\npublic:\n    SubExpression(Expression* left,Expression* right):symbolExpression(left,right){}\n    int interpreter(map<char,int> var)override{\n        return left->interpreter(var)-right->interpreter(var);\n    }\n}\n//加法运算\nclass AddExpression:public SymbolExpression{\npublic:\n    AddExpression(Expression* left,Expression* right):symbolExpression(left,right){}\n    int interpreter(map<char,int> var)override{\n        return left->interpreter(var)+right->interpreter(var);\n    }\n}\n\nExpression* analyse(string expStr){\n    stack<Expression*> expStack;\n    Expression* left=nullptr;\n    Expression* right=nullptr;\n    for(int i=0;i<expStr.size();i++)\n    {\n        switch(expStr[i]){\n         case '+':\n        \tleft=expStack.top();\n        \tright=new VarExpression(expStr[++i]);\n        \texpStack.push(new AddExpression(left,right));\n        \tbreak;\n        case '-':\n        \tleft=expStack.top();\n        \tright=new VarExpression(expStr[++i]);\n        \texpStack.push(new SubExpression(left,right));\n        \tbreak;\n        default:\n        \texpStack.push(new VarExpression(expStr[i]));\n        }\n    }\n    Expression* expression=expStack.top();\n    return expression;\n}\n//释放内存\nvoid release(Expression *expression){\n    //...\n}\n\nint main(int argc,const char * argv[]){\n    string expStr=\"a+b-c+d\"\n    map<char,int> var;\n    var.insert(make_pair('a',5));\n    var.insert(make_pair('b',3));\n    var.insert(make_pair('c',2));\n    var.insert(make_pair('d',1));\n    Expression* expression=analyse(expStr);\n    int result=expression->interpreter(var);\n    cout<<result<<endl;\n    release(expression);\n    return 0;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br")])]),n("h4",{attrs:{id:"_1-模式定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-模式定义"}},[s._v("#")]),s._v(" 1.模式定义")]),s._v(" "),n("p",[s._v("给定一个语言，定义他的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。")]),s._v(" "),n("h4",{attrs:{id:"_2-要点总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-要点总结"}},[s._v("#")]),s._v(" 2.要点总结")]),s._v(" "),n("ul",[n("li",[s._v("interpreter模式的应用场合是Interpreter模式应用中的难点，只有满足“业务规则频繁变化，且类似的结构不断重复出现，并且容易抽象为语法规则的问题”才适用Interpreter模式。")]),s._v(" "),n("li",[s._v("使用interperter模式来表示文法规则，从而可以使用面向对象技巧来方便地“扩展”文法。")]),s._v(" "),n("li",[s._v("interpreter模式比较适合简单的文法，对于复杂的文法表示，interpreter模式会产生比较大的类层次结构，需要求助于语法分析生成器这样的标准工具。")]),s._v(" "),n("li",[s._v("解析器现今并不常用，适用于小而简单的文法。")])]),s._v(" "),n("h4",{attrs:{id:"_3、结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、结构"}},[s._v("#")]),s._v(" 3、结构")])])}),[],!1,null,null,null);n.default=a.exports}}]);