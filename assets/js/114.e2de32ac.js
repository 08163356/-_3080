(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{451:function(t,r,_){"use strict";_.r(r);var a=_(7),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"一、对象创建模式之builder-构建器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、对象创建模式之builder-构建器模式"}},[t._v("#")]),t._v(" "),r("strong",[t._v("一、对象创建模式之Builder（构建器模式）")])]),t._v(" "),r("p",[t._v("通过“对象创建”绕开new，来避免对象创建过程（new）中所导致的紧耦合（依赖具体类）")]),t._v(" "),r("h4",{attrs:{id:"_1-动机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-动机"}},[t._v("#")]),t._v(" "),r("strong",[t._v("1.动机")])]),t._v(" "),r("p",[t._v("在软件系统中，有时面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分进程面临着剧烈的变化，但是将他们组合在一起的算法却相对稳定。")]),t._v(" "),r("p",[t._v("如何应对这种变化？如何提供一种“封装机制”来隔离出“复杂对象的各个部分”的变化，从而保持系统中的“稳定构建算法”不随着需求的改变而改变？")]),t._v(" "),r("h4",{attrs:{id:"_2-模式定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-模式定义"}},[t._v("#")]),t._v(" 2.模式定义")]),t._v(" "),r("p",[t._v("将一个复杂对象的构建与其表示相分离，使得同样的构建过程（稳定）可以构建不同的表示（变化）")]),t._v(" "),r("h3",{attrs:{id:"_3-要点总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-要点总结"}},[t._v("#")]),t._v(" 3.要点总结")]),t._v(" "),r("ul",[r("li",[t._v("Builder模式主要用于“分步骤构建一个复杂的对象”。在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化。")]),t._v(" "),r("li",[t._v("变化点在哪里，封装在哪里--Builder模式主要在于应对“复杂对象各个部分”的频繁需求变动。其缺点在于难以应对“分步骤构建算法”的需求变动。")]),t._v(" "),r("li",[t._v("在Builder模式中，要注意不同语言中构造器内调用虚函数的差别。")])]),t._v(" "),r("h3",{attrs:{id:"二、散装知识点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、散装知识点"}},[t._v("#")]),t._v(" "),r("strong",[t._v("二、散装知识点")])]),t._v(" "),r("p",[t._v("1.C++构造函数里面调用虚函数完成的是静态绑定而不是动态绑定")]),t._v(" "),r("p",[t._v("2.构造函数中虚函数不可以调用子类")]),t._v(" "),r("p",[t._v("3.子类的构造函数是先调用父类的构造函数的")])])}),[],!1,null,null,null);r.default=s.exports}}]);