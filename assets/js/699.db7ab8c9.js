(window.webpackJsonp=window.webpackJsonp||[]).push([[699],{1036:function(t,p,e){"use strict";e.r(p);var v=e(7),c=Object(v.a)({},(function(){var t=this,p=t._self._c;return p("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[p("p",[t._v("文件名 "),p("code",[t._v("typed.d.ts")]),t._v(" 是指一个 TypeScript 类型定义文件。在 TypeScript 中，"),p("code",[t._v(".d.ts")]),t._v(" 文件扩展名用于声明模块、库或代码库的类型信息。")]),t._v(" "),p("p",[t._v("TypeScript 是 JavaScript 的超集，它为 JavaScript 提供了静态类型检查和类型推断的功能。通过类型定义文件，开发人员可以为现有的 JavaScript 库或模块提供类型信息，以便在 TypeScript 项目中进行类型安全的开发。")]),t._v(" "),p("p",[t._v("文件名中的 "),p("code",[t._v("d")]),t._v(" 代表 "),p("code",[t._v("definition")]),t._v("（定义），表示该文件是用于定义类型的。"),p("code",[t._v(".ts")]),t._v(" 文件扩展名通常用于实际的 TypeScript 代码文件，而 "),p("code",[t._v(".d.ts")]),t._v(" 文件扩展名用于类型定义文件。")]),t._v(" "),p("p",[t._v("将类型声明分离到类型定义文件中的好处是，它允许 TypeScript 开发人员在不改变实际 JavaScript 代码的情况下，获得类型检查和类型推断的好处。这对于与现有 JavaScript 代码库集成、使用第三方库或编写声明文件以供其他开发人员使用非常有用。")])])}),[],!1,null,null,null);p.default=c.exports}}]);