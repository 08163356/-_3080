(window.webpackJsonp=window.webpackJsonp||[]).push([[582],{921:function(n,s,a){"use strict";a.r(s);var e=a(7),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("js中如何创建对象池重复利用对象")]),n._v(" "),s("p",[n._v("在JavaScript中，可以使用对象池来重复利用对象，从而减少创建和销毁对象的次数，提高性能。对象池是一个存储对象的容器，当需要使用对象时，可以从对象池中取出一个对象，使用完毕后再将其放回对象池中，以便下次重复利用。 以下是一个简单的对象池实现示例：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("​```javascript\nfunction ObjectPool(createObjectFn) {\nvar pool = [];\nreturn {\nget: function() {\nif (pool.length > 0) {\nreturn pool.shift();\n\x3c!-- more --\x3e\n} else {\nreturn createObjectFn();\n}\n},\nput: function(obj) {\npool.push(obj);\n}\n};\n}\n​```\n\n使用该对象池可以这样实现：\n\n​```javascript\n// 定义一个对象类\nfunction MyObject() {\n// ...\n}\n\n// 创建对象池\nvar pool = ObjectPool(function() {\nreturn new MyObject();\n});\n\n// 从对象池中获取对象\nvar obj1 = pool.get();\nvar obj2 = pool.get();\n\n// 使用对象\n// ...\n\n// 将对象放回对象池中\npool.put(obj1);\npool.put(obj2);\n​```\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br")])]),s("p",[n._v("在Canvas中，可以使用对象池来重复利用对象，从而减少创建和销毁对象的次数，提高性能。下面是一个使用对象池实现Canvas中对象重用的示例代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("javascript\n// 定义一个圆形对象类\nfunction Circle(x, y, radius) {\nthis.x = x;\nthis.y = y;\nthis.radius = radius;\n}\n\n// 定义一个圆形对象池\nvar circlePool = {\npool: [],\nget: function(x, y, radius) {\nif (this.pool.length > 0) {\nvar circle = this.pool.pop();\ncircle.x = x;\ncircle.y = y;\ncircle.radius = radius;\nreturn circle;\n} else {\nreturn new Circle(x, y, radius);\n}\n},\nput: function(circle) {\nthis.pool.push(circle);\n}\n};\n\n// 绘制圆形\nfunction drawCircle(ctx, x, y, radius) {\nvar circle = circlePool.get(x, y, radius);\nctx.beginPath();\nctx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI);\nctx.fill();\ncirclePool.put(circle);\n}\n\n// 使用示例\nvar canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\n\ndrawCircle(ctx, 50, 50, 20);\ndrawCircle(ctx, 100, 100, 30);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br")])]),s("p",[n._v("在这个示例中，定义了一个圆形对象类"),s("code",[n._v("Circle")]),n._v("，并创建了一个圆形对象池"),s("code",[n._v("circlePool")]),n._v("。在绘制圆形时，通过调用"),s("code",[n._v("circlePool.get()")]),n._v("方法从对象池中获取一个圆形对象，使用完毕后再通过"),s("code",[n._v("circlePool.put()")]),n._v("方法将其放回对象池中，以便下次重复利用。通过使用对象池，可以减少创建和销毁圆形对象的次数，提高性能。 需要注意的是，在实际应用中，需要根据具体情况来优化对象池的实现，例如限制对象池的大小、调整对象池中对象的生命周期等。同时，在使用对象池时，需要确保每次从对象池中取出的对象都是一个新的状态，以避免出现意外的错误。")])])}),[],!1,null,null,null);s.default=t.exports}}]);