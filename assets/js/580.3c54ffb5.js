(window.webpackJsonp=window.webpackJsonp||[]).push([[580],{922:function(s,e,a){"use strict";a.r(e);var n=a(7),t=Object(n.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"webassembly是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webassembly是什么"}},[s._v("#")]),s._v(" WebAssembly是什么？")]),s._v(" "),e("p",[s._v("WebAssembly(wasm)，是由 Google、Microsoft、Mozilla、Apple 等几家大公司合作发起的一个关于面向 Web 的通用二进制和文本格式的项目。")]),s._v(" "),e("p",[s._v("wasm是一个可移植、体积小、加载快并且兼容 Web 的全新格式。")]),s._v(" "),e("p",[s._v("wasm是一种新的字节码格式，旨在成为高级语言的编译目标，目前可以使用 C、C++、Rust、Go、Java、C# 等编译器来创建 wasm 模块。该模块以二进制的格式发送到浏览器，并在专有虚拟机上执行，与JavaScript虚拟机共享内存和线程等资源")]),s._v(" "),e("h2",{attrs:{id:"为什么会有webassembly"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么会有webassembly"}},[s._v("#")]),s._v(" 为什么会有WebAssembly？")]),s._v(" "),e("p",[s._v("JavaScript的困境")]),s._v(" "),e("ul",[e("li",[s._v("语法太灵活导致大型项目开发困难")]),s._v(" "),e("li",[s._v("性能不能满足一些场景的需要")])]),s._v(" "),e("p",[s._v("MicroSoft解决办法")]),s._v(" "),e("p",[s._v("MicroSoft 集结了 C# 的首席架构师以及 Delphi 和 Turbo Pascal 的创始人 Anders Hejlsberg 等明星整容，打造了 TypeScript。")]),s._v(" "),e("p",[s._v("TypeScript 它是 JavaScript 的一个严格超集，并添加了可选的静态类型和使用看起来像基于类的面向对象编程语法操作 Prototype。")]),s._v(" "),e("p",[s._v("Google解决方法")]),s._v(" "),e("p",[s._v("Google 在 2009 年在 V8 中引入了 JIT 技术（Just in Time Compiling），通过各种编译优化直接将 JavaScript 编译成运行在 CPU 上的机器码。JavaScript 的性能提升了 20 - 40 倍。")]),s._v(" "),e("p",[s._v("Google 的 "),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.dartlang.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Dart "),e("OutboundLink")],1),s._v("为浏览器引入新的虚拟机去直接运行 Dart 程序以提升性能，然而主流浏览器支持有限，且用 Dart 开发的人不多")]),s._v(" "),e("p",[s._v("Mozilla解决方法")]),s._v(" "),e("p",[s._v("为了进一步 提高JIT 优化效率，继而提升 JavaScript 性能，浏览器鼻祖 Mozilla 推出了 asm.js")]),s._v(" "),e("p",[s._v("和 TypeScript 比较相似的是，asm.js 同样也是强类型的 JavaScript，但是他的语法则是 JavaScript 的子集，是为了 JIT 性能优化而专门打造的。")]),s._v(" "),e("p",[s._v("然而asm.js尚未完全标准化，浏览器支持不够好，语法太简单、有很大限制，开发效率低")]),s._v(" "),e("h2",{attrs:{id:"webassembly的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webassembly的原理"}},[s._v("#")]),s._v(" WebAssembly的原理")]),s._v(" "),e("p",[s._v("和 JavaScript 解释运行不同的是，WebAssembly 的字节码和底层机器码很相似，可以快速的装载运行，因此性能相对于 JavaScript 的解释有大幅度的提升。也就是说，"),e("strong",[s._v("WebAssembly 并不是一门编程语言，而是一份字节码标准")]),s._v("，需要使用高级编程语言编译出字节码放到 WebAssembly 的虚拟机中运行（有点像 Java ）。浏览器厂商需要做的事情就是根据 WebAssembly 的规范实现虚拟机。")]),s._v(" "),e("p",[s._v("WebAssembly甚至比asm.js还快5%-7%")]),s._v(" "),e("h2",{attrs:{id:"如何开发webassembly"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何开发webassembly"}},[s._v("#")]),s._v(" 如何开发WebAssembly？")]),s._v(" "),e("p",[s._v("使用WebAssembly的过程可以归纳为三步：")]),s._v(" "),e("ol",[e("li",[s._v("使用强类型语言（如C++）编写代码")]),s._v(" "),e("li",[s._v("用工具（Emscripten）将代码转换成wasm文件")]),s._v(" "),e("li",[s._v("在页面中加载wasm模块，wasm模块可以直接执行或者作为一个库被调用")])]),s._v(" "),e("p",[s._v("作为开发 WebAssembly的工具 。目前有binarian，这也是新诞生一种工具，通过与emscripten一同协作来产生WebAssembly code。此外，也可以用其他工具比如GCC 。")]),s._v(" "),e("p",[s._v("接下来，当你有了一个c++文件，就可以通过相应的编译命令，得到两个文件，"),e("em",[s._v(".js和")]),s._v(".WASM。这个js文件便可以直接在浏览器中运行。\n同时，也可以在WASM中调用js，包括一些DOM APIs，通过使用EM_ASM这个命令：")]),s._v(" "),e("p",[s._v("使用高级语言编写wasm")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//CALL JS FROM WASM\n#include<emscripten.h>\nint main(){\n    EM_ASM(\n        const elt = document.getElementById("hello-world");\n        elt.innerText = "Hello World";\n    );\n    return 0;\n}\n当然，不仅限于Web API，你同样也可以可以在C++中导入你在js中定义的函数。\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("JavaScript中调用wasm")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" <script>\n   /**\n* @param {String} path wasm 文件路径\n* @param {Object} imports 传递到 wasm 代码中的变量\n*/\n       function loadWebAssembly (path, imports = {}) {\n         return fetch(path) // 加载文件\n           .then(response => response.arrayBuffer()) // 转成 ArrayBuffer\n           .then(buffer => WebAssembly.compile(buffer))\n           .then(module => {\n             imports.env = imports.env || {}\n             // 开辟内存空间\n             imports.env.memoryBase = imports.env.memoryBase || 0\n             if (!imports.env.memory) {\n               imports.env.memory = new WebAssembly.Memory({ initial: 256 })\n             }\n             // 创建变量映射表\n             imports.env.tableBase = imports.env.tableBase || 0\n             if (!imports.env.table) {\n               // 在 MVP 版本中 element 只能是 \"anyfunc\"\n               imports.env.table = new WebAssembly.Table({ initial: 0, element: 'anyfunc' })\n             }\n             // 创建 WebAssembly 实例\n             return new WebAssembly.Instance(module, imports)\n           })\n       }\n       //调用\n       loadWebAssembly('./math.wasm')\n       .then(instance => {\n           const add = instance.exports._add//取出c里面的方法\n           const square = instance.exports._square//取出c里面的方法\n           console.log('10 + 20 =', add(10, 20))\n           console.log('3*3 =', square(3))\n           console.log('(2 + 5)*2 =', square(add(2 + 5)))\n       })\n   <\/script>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])]),e("h2",{attrs:{id:"webassembly应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webassembly应用场景"}},[s._v("#")]),s._v(" WebAssembly应用场景")]),s._v(" "),e("p",[s._v("更好的让一些语言和工具可以编译到 Web 平台运行。\n图片/视频编辑。\n游戏：\n需要快速打开的小游戏\nAAA 级，资源量很大的游戏。\n游戏门户（代理/原创游戏平台）\nP2P 应用（游戏，实时合作编辑）\n音乐播放器（流媒体，缓存）\n图像识别\n视频直播\nVR 和虚拟现实\nCAD 软件\n科学可视化和仿真\n互动教育软件和新闻文章。\n模拟/仿真平台(ARC, DOSBox, QEMU, MAME, …)。\n语言编译器/虚拟机。\nPOSIX用户空间环境，允许移植现有的POSIX应用程序。\n开发者工具（编辑器，编译器，调试器…）\n远程桌面。\nVPN。\n加密工具。\n本地 Web 服务器。\n使用 NPAPI 分发的插件，但受限于 Web 安全协议，可以使用 Web APIs。\n企业软件功能性客户端（比如：数据库）")]),s._v(" "),e("h2",{attrs:{id:"webassembly典型案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webassembly典型案例"}},[s._v("#")]),s._v(" WebAssembly典型案例")]),s._v(" "),e("p",[s._v("1.TeaVM — 将 JVM 字节码翻译成 JavaScript 和 WebAssembly")]),s._v(" "),e("p",[s._v("2.Figma — 基于浏览器的多人实时协作 UI 设计工具")]),s._v(" "),e("p",[s._v("3.Google Earth — 支持各大浏览器的 3D 地图，而且运行流畅")]),s._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[s._v("Magnum — 跨平台的 OpenGL 图形引擎")])]),s._v(" "),e("li",[e("p",[s._v("Egret Engine — 最受欢迎的 HTML 5 游戏引擎，让游戏引擎快三倍")])]),s._v(" "),e("li",[e("p",[s._v("Blazor — 让 .NET 代码也能在浏览器运行")])]),s._v(" "),e("li",[e("p",[s._v("Web-DSP — 使用浏览器就能即时制作多媒体影音特效")])]),s._v(" "),e("li",[e("p",[s._v("Walt — 用 JavaScript 语法也能快速开发原生的极速应用")])])]),s._v(" "),e("h2",{attrs:{id:"webassembly展望。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webassembly展望。"}},[s._v("#")]),s._v(" WebAssembly展望。")]),s._v(" "),e("p",[s._v("..将来 WebAssembly 将会支持不带内存垃圾回功能的的语言")]),s._v(" "),e("p",[s._v("..规范将会为在未来为 wasm 提供访问指定平台的接口，这样你就可以不用在你的程序中内置 JavaScript。")]),s._v(" "),e("p",[s._v("..未来引入Source map的支持，以更方便的调试程序")]),s._v(" "),e("p",[s._v("..Wasm 将会接近实现原生的线程（比如，C++ 风格的线程）")]),s._v(" "),e("p",[s._v("..WebAssembly 拥有和早年 Java 使用 Applets 来实现可移植性的同样的目标")]),s._v(" "),e("p",[s._v("WebAssembly 主要是为了解决 JS 的性能瓶颈，也就是说 WebAssembly 适合用于需要大量计算的场景，例如：")]),s._v(" "),e("ul",[e("li",[s._v("在浏览器中处理音视频， "),e("a",{attrs:{href:"https://github.com/Bilibili/flv.js/",target:"_blank",rel:"noopener noreferrer"}},[s._v("flv.js"),e("OutboundLink")],1),s._v(" 用 WebAssembly 重写后性能会有很大提升；")]),s._v(" "),e("li",[s._v("React 的 dom diff 中涉及到大量计算，用 WebAssembly 重写 React 核心模块能提升性能。")]),s._v(" "),e("li",[s._v("Safari 浏览器使用的 JS 引擎 JavaScriptCore 也已经支持 WebAssembly，RN 应用性能也能提升；")])]),s._v(" "),e("p",[e("strong",[s._v("VIDAA中使用WebAssembly的场景")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("Web SDK，替代UserJS，以获得更高的安全性及性能")]),s._v(" "),e("li",[s._v("HiPlayer，音视频相关")]),s._v(" "),e("li",[s._v("Model JS?")]),s._v(" "),e("li",[s._v("UI Biz ?")]),s._v(" "),e("li",[s._v("HiSense UI ?")])]),s._v(" "),e("h2",{attrs:{id:"附-名词解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#附-名词解释"}},[s._v("#")]),s._v(" 附：名词解释")]),s._v(" "),e("p",[s._v("AOT or JIT")]),s._v(" "),e("blockquote",[e("p",[s._v("AOT: Ahead-of-Time compilation")])]),s._v(" "),e("p",[s._v("必须是强类型语言，编译在执行之前，编译直接生成 CPU 能够执行的二进制文件，执行时 CPU 不需要做任何编译操作，直接执行，性能最佳。")]),s._v(" "),e("blockquote",[e("p",[s._v("JIT: Just-in-Time compilation")])]),s._v(" "),e("p",[s._v("没有编译环节。执行时根据上下文生成二进制汇编代码，灌入 CPU 执行。JIT 执行时，可以根据代码编译进行优化，代码运行时，不需要每次都翻译成二进制汇编代码，V8 就是这样优化 JavaScript 性能的。")]),s._v(" "),e("p",[s._v("由于 JavaScript 的动态语言类型的特性已无法改变，所以只能采用 JIT 的形式对性能进行优化。")]),s._v(" "),e("p",[s._v("个人问题：")])])}),[],!1,null,null,null);e.default=t.exports}}]);