(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{496:function(v,_,t){"use strict";t.r(_);var p=t(7),r=Object(p.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"线程编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程编程"}},[v._v("#")]),v._v(" 线程编程")]),v._v(" "),_("h4",{attrs:{id:"一、线程的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、线程的基本概念"}},[v._v("#")]),v._v(" 一、线程的基本概念")]),v._v(" "),_("p",[_("strong",[v._v("1.用户线程")]),v._v("（内核线程和轻量级线程开发用得比较少就不做介绍了）")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("建立在用户空间的多个用户级线程，映射倒轻量级进程后调度执行")])]),v._v(" "),_("li",[_("p",[v._v("用户线程在用户空间创建、同步、销毁，开销较低")])]),v._v(" "),_("li",[_("p",[v._v("每个线程具有独特的ID")])])]),v._v(" "),_("p",[_("strong",[v._v("2.使用说明")]),v._v("：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("程功能不属于C/C++标准库，链接时需用-pthread选项\n")])]),v._v(" "),_("li",[_("p",[v._v("线程功能属于C++11标准库，可用C++11提供的thread类定义线程对象，C++11标准库同时提供基本线程同步机制")])])]),v._v(" "),_("p",[_("strong",[v._v("3.进程和线程的比较")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("线程空间不独立，有问题的线程会影响其它线程，；进程空间独立，有问题的进程一般不会影响其它进程。")])]),v._v(" "),_("li",[_("p",[v._v("创建进程需要额外的性能开销。")])]),v._v(" "),_("li",[_("p",[v._v("线程用于开发细颗粒度并行性，进程用于开发粗颗粒度并行性")])]),v._v(" "),_("li",[_("p",[v._v("线程容易共享数据，进程共享数据必须使用进程间通讯机制。")])])]),v._v(" "),_("p",[v._v("（不想再抄知识点，这样收获并不大，我想在看视屏的时候多思考，不会的跳过，先建立体系，以后遇到的时候再捡起来学习就好。）")]),v._v(" "),_("p",[_("strong",[v._v("4.线程同步机制")])]),v._v(" "),_("p",[v._v("资源竞争")]),v._v(" "),_("p",[_("strong",[v._v("5.互斥")])]),v._v(" "),_("p",[_("strong",[v._v("6.死锁")])]),v._v(" "),_("p",[v._v("互斥容易导致死锁问题")]),v._v(" "),_("p",[v._v("若某个线程在临界区内的操作导致异常，有可能无法解锁，从而导致其他线程被永久阻塞")]),v._v(" "),_("p",[v._v("若临界区代码有多路分支，其中部分分支提前结束，但没有执行解锁操作，其他线程依旧被永久阻塞")]),v._v(" "),_("p",[v._v("当多个线程同时申请多个资源时，加锁次序不同也可能导致死锁。")]),v._v(" "),_("p",[v._v("解决办法")]),v._v(" "),_("p",[v._v("资源获取即初始化（resource acquire is initialization，RAII）")]),v._v(" "),_("p",[v._v("使用互斥对象管理类模板自动管理资源")]),v._v(" "),_("p",[_("strong",[v._v("7.信号量")])]),v._v(" "),_("p",[v._v("条件变量")]),v._v(" "),_("p",[v._v("散装问题、知识点")]),v._v(" "),_("p",[v._v("1.通过pstree命令，可以看到全系统的进程树结构。如果不希望合并相同的子树，使用pstree -a")]),v._v(" "),_("h3",{attrs:{id:"二、散装知识点、问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、散装知识点、问题"}},[v._v("#")]),v._v(" 二、散装知识点、问题")]),v._v(" "),_("p",[v._v("1.C++的内存模型是什么？堆栈又是个什么关系？什么东西放到堆里面什么东西放到栈里面？")]),v._v(" "),_("p",[v._v("2.哑型指针使用得挺多的，具体得意义在哪儿呢？")])])}),[],!1,null,null,null);_.default=r.exports}}]);